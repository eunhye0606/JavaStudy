Test046.java
- 반복문 실습
○ 반복문의 개요
	
	주어진 조건이 『참』인 경우
	일정한 영역의 문장을 반복 수행하다가
	조건식이 거짓이 되는 순간이 오면,
	반복 수행을 중단하는 문장이다.
	이러한 반복문에는 『while』, 『do ~ while』,『for』문 등이 있으며
	반복문의 제어를 위해 『break』,『continue』문을
	사용하는 경우가 있다.

○ while 문

	조건식을 먼저 비교하여
	조건식의 처리 결과가 참인 경우, 특정 영역을 반복 수행하는 문장으로
	반복 횟수가 정해져 있지 않은 경우나
	반복 횟수가 많은 경우 주로 사용한다.
	while 문은 조건이 맞지 않은 경우
	반복은 커녕 단 한 번도 실행되지 않을 수 있다.

○ while 문의 형식 및 구조

	while(조건식)
	{
		실행문;
	}
☆ 문제 1부터 100까지의 합을 계산하여
   결과 출력하는 프로그램을 구현한다.
   단 , while 반복문을 사용한다.

   실행 예 )
   1부터 100까지의 합: 5050
   계속하려면 아무 키나.......

※ 문제 인식 및 분석
	1. 출력 구문이 반복문의 영역 밖에 위치해야 한다.
	2. 1부터 1씩 증가할 변수와 누적합을 담을 변수
	   두 개의 변수가 필요하다.

Test047.java
-반복문(while)실습
//1부터 100까지의 정수 중에서 
//짝수들의 합을 계산하여 결과값을 출력하는 프로그램을 구현하라.
// 단, 조건문을 사용하지 않도록 하며,
// while 반복문을 활용하여 작성할 수 있도록 한다.

// 실행 예)
// 1부터 100까지의 정수 중 짝수의 합 : xxxx
// 계속 .........


//※ 문제 인식 및 분석
// 2+ 4+ 6+ 8 + ... + 100
//	- 초기값 : 2
//	- 증가값 : 2
//  - 한계값 : 100

est048.java
-반복문(while)실습
//1부터 100까지의 정수 중에서
//짝수들의 합과 홀수들의 합을 따로 구분하여 계산한다.
// 단, 반복문은 while 문을 사용할 수 있도록 하며,
// 조건 구문은 if 조건문을 사용하여 작성할 수 있도록 한다.

// 실행 예 )
// 1부터 100까지의 정수 중
// 짝수의 합 : 2550
// 홀수의 합 : 2550
//계속 ............

Test049.java
-반복문(while)실습
//실행 예 )
// 1 부터 100 까지 정수의 합은 : 5050
// 1 부터 100 까지 짝수의 합은 : 2550
// 1 부터 100 까지 홀수의 합은 : 2500
//계속 ............

Test50.java
-반복문(while)실습
//1부터 100까지 정수의 합을 구하되,
//10의 배수가 될 때 마다... 결과를 출력하는 프로그램을 구현하라.

// 실행 예 )
// 1~10 까지의 합:
// 1~20 까지의 합:
// 1~30 까지의 합:
//	    :	
//1~100까지의 합 : 
//계속 .............

Test051.java
-반복문(while)실습
-n/n+1 + n+1/n+2 + ... + n+8 / n+9 의 연산 처리 결과를 출력하는 프로그램을 구현.

Test052.java
//반복문(while 문) 실습
//1 * 2 * 3 * ...* 9 * 10
-누적곱은 1로 초기화.

Test053.java
-반복문(while)실습
//사용자로부터 임의의 정수를 입력받아
//입력받은 정수가 소수인지 아닌지를 판별하여
//결과를 출력하는 프로그램을 구현한다.
※ 소수 : 1 또는 자기 자신의 값 이외에 어떤 수로도 나누어 떨어지지 않는 수.
//		     단, 1 은 소수 아님.

Test054.java

-반복문(while)실습
// 사용자로부터 임의의 두 정수를 입력받아
// 작은 수부터 큰 수 까지의 합을 구하여
// 결과를 출력하는 프로그램을 구현한다.

// 실행 예)
// 첫 번째 정수 입력 : 10
// 두 번째 정수 입력 : 20 
// >> 10 ~ 20 까지의 합은 : xxxx
// 계속하려면 ........

// 첫 번째 정수 입력 : 10
// 두 번째 정수 입력 : 2 
// >> 2 ~ 10 까지의 합은 : xxxx
// 계속하려면 ........

Test055.java	과제
-반복문(while)실습
//   사용자로부터 임의의 정수를 입력받아
//   1부터 입력받은 그 정수까지의
//   전체 합과, 짝수의 합과 , 홀수의 합을 
//   각각 결과값으로 출력하는 프로그램을 구현한다.


Test056.java
-반복문(while)실습
//사용자로부터 원하는 단(구구단)을 입력받아
//해당하는 구구단을 출력하는 프로그램을 구현한다.
// 단, 1단 ~ 9단 사이의 수를 입력받은 상황이 아니라면
// 이에 대한 안내를 한 후 프로그램을 종료할 수 있도록 처리한다.
//실행 예 )
//원하는 단(구구단) 입력 : 7
//7 * 1 = 7
//7 * 2 = 14
//7 * 3 = 21
//    :
//7 * 9 = 63
//계속하려면 아무 키나 .......

//원하는 단(구구단) 입력 : 11
//1부터 9까지의 정수만 입력이 가능합니다.
//계속하려면 아무 키나 .......
return; → 프로그램 종료, main()함수 종료.


Test057.java
-반복문(do ~ while)실습
○ 개요
	『do ~ while』문은 『while』문과 마찬가지로
	특정한 영역을 반복 수행하는 반복문이다.
	다만 『while』문과 다른 점은
	조건식에 대한 검사를 반복문을 수행한 이후에 한다는 것이다.
	이와 같은 성격으로 인해 반드시 한 번은 수행하게 되는 특징을 갖는다.

○ 형식 및 구조
  
	do 
	{
		실행문;
	}
	while(조건식);

// do ~ while 문의 활용 모델
// 예를 들어... 사용자로부터 특정 범위의 정수가 입력될 때 까지
// 입력받은 행위 자체를 반복해서 수행해야 하는 상황이라 가정한다.

//즉, 최소 한 번은 사용자의 입력값을 받아오는 처리를 수행해야
//반복을 추가로 수행할지 말지의 여부를 결정할 수 있는 상황이다.


Test058.java


-반복문(do ~ while 문) 실습

// 사용자로부터 여러 개의 양의 정수를 입력받고,
// 그 합을 계산하여 출력하는 프로그램을 작성한다.

// 단, -1이 입력되는 순간
// 입력을 중지하고 그동안 입력된 정수의 합을 출력해주는 프로그램을 구현한다.
// 즉, 『-1』을 입력 중지 커맨드로 활용한다.
// do ~ while 문을 활용하여 문제를 해결할 수 있도록 한다.



// 실행 예 )
// 정수1 입력 : 10
// 정수2 입력 : 5
// 정수3 입력 : 8
// 정수4 입력 : 9
// 정수5 입력 : -1

// >> 현재까지 입력된 정수의 합 : xxxx
// 계속하려면 .............

Test059.java
-반복문(do ~ while 문) 실습

○ 개요

    『for』문은 정해진 횟수만큼 반복해야 하는 경우
	유용하게 사용되어지는 반복문으로
	『while』문과 마찬가지로 반복 실행해야 하는 구문이
	조건에 맞지 않을 경우 한 번도 수행하지 않을 수 있으며
	루프 변수의 초기값, 조건식, 증감식 등을 한 지점에서 확인할 수 있기 때문에
	가독성이 높은 반복문에 해당한다.

○ 형식 및 구조
	
	for (수식1; 수식2; 수식3)
	{
		실행문;
	}

	수식1은 루프 변수의 초기화를 위해 사용되며,
		    최초 단 한번만 실행된다.
	수식2는 조건식을 나타내는 것으로 이 조건식(수식2)이 만족하면
	        루프를 반복해서 수행하게 된다.
			『for』문의 진행 순서는 수식2가 참이면 반복문을 수행하고
			수식3을 실행한 후 수식2의 조건식을 다시 검사하는 구조로 진행된다.
			따라서 처음에 조건식의 처리 결과가 거짓일 경우
			『for』루프를 한 번도 수행하지 않게 되는 것이다.
	수식3은 루프 변수의 재초기화를 위해 사용되어지며,
		    반복문의 조건식을 무너뜨리게 되는 증감식으로 처리하는 것이 일반적이다.
			컴마(『,』를 이용하여 여러 문장을 동시에 수행할 수도 있다.

수식2를 제외하고는 콤마가 사용가능하다!

Test060.java

-반복문(for 문) 실습


//1부터 100까지의 정수 중에서
//4의 배수만 출력하는 프로그램을 구현한다.
//단 for문을 활용해야 하며
//한 줄에 5개씩만 출력할 수 있도록 한다.


//실행 예 )
// 4	8	12	16	20
//24	28	32	36	40
//			:
//			:
//계속하려면 아무 키나 누르세요.....



Test061.java
-반복문(for 문) 실습

//다중 for문(반복문의 중첩)을 활용한 구구단 출력 실습

//실행 예)
/*
[2단]
2 * 1 = 2
2 * 2 =4
	:
2 * 9 = 18

[3단]
  :
9 * 9 = 81
// 계속하려면..........
*/

Test062.java
-반복문(for 문) 실습
//다중 for문(반복문의 중첩)을 활용한 구구단 출력 실습

//① 2중첩 *2		//②3중첩 *1


// 실행 예)
/*

2 * 1 = 2               3 * 1 = 3               4 * 1 = 4               5 * 1 = 5
2 * 2 = 4               3 * 2 = 6               4 * 2 = 8               5 * 2 = 10
2 * 3 = 6               3 * 3 = 9               4 * 3 = 12              5 * 3 = 15
2 * 4 = 8               3 * 4 = 12              4 * 4 = 16              5 * 4 = 20
2 * 5 = 10              3 * 5 = 15              4 * 5 = 20              5 * 5 = 25				→→→ 1문단
2 * 6 = 12              3 * 6 = 18              4 * 6 = 24              5 * 6 = 30
2 * 7 = 14              3 * 7 = 21              4 * 7 = 28              5 * 7 = 35
2 * 8 = 16              3 * 8 = 24              4 * 8 = 32              5 * 8 = 40
2 * 9 = 18              3 * 9 = 27              4 * 9 = 36              5 * 9 = 45

6 * 1 = 6               7 * 1 = 7               8 * 1 = 8               9 * 1 = 9
6 * 2 = 12              7 * 2 = 14              8 * 2 = 16              9 * 2 = 18
6 * 3 = 18              7 * 3 = 21              8 * 3 = 24              9 * 3 = 27
6 * 4 = 24              7 * 4 = 28              8 * 4 = 32              9 * 4 = 36
6 * 5 = 30              7 * 5 = 35              8 * 5 = 40              9 * 5 = 45				→→→ 2문단
6 * 6 = 36              7 * 6 = 42              8 * 6 = 48              9 * 6 = 54
6 * 7 = 42              7 * 7 = 49              8 * 7 = 56              9 * 7 = 63
6 * 8 = 48              7 * 8 = 56              8 * 8 = 64              9 * 8 = 72
6 * 9 = 54              7 * 9 = 63              8 * 9 = 72              9 * 9 = 81
계속하려면 아무 키나 누르십시오 . . .

//1. Test061과 비교하여
//출력의 방향이 다르기 때문에
//반복문의 제어 흐름도 달라져야 한다.
//콘솔기반의 출력환경이기 때문에..

//2.(1)에따라
//단과 곱해지는 수의 위치가
//달라진 상태에서 반복문 구성

//3.(2)에서 처리한 결과를 
//두 문단으로 반복하는 반복문 구성
//check~!!!! 반복문에 2의 결과를 삽입

//4.같은 구문을 
//두 문단으로 나누어 처리하는 과정에서
//문단에 따라 주어진 환경 (h의 값)을 활용하는 방법으로
//최종 반복문 3중첩.

Test063.java	과제
-반복문(for 문) 실습
//◎ 과제
//   다음과 같은 내용이 출력될 수 있도록
//   반복문의 중첩 구문을 작성하여 프로그램을 구현한다.

/* 실행 예)
    *	→ 공백 4 별 1    
   **   → 공백 3 별 2
  ***   
 ****
*****
*/

Test064.java	과제
-반복문(for 문) 실습
//다중 for문(반복문의 중첩)을 활용한 별찍기 실습

//◎ 과제
//   다음과 같은 내용이 출력될 수 있도록
//   반복문의 중첩 구문을 작성하여 프로그램을 구현한다.

/* 실행 예)  

    *
   ***
  *****
 *******
*********
*/

Test065.java	과제
-반복문(for 문) 실습
//다중 for문(반복문의 중첩)을 활용한 별찍기 실습

//◎ 과제
//   다음과 같은 내용이 출력될 수 있도록
//   반복문의 중첩 구문을 작성하여 프로그램을 구현한다.

/* 실행 예)

*********
 *******
  *****
   ***
    *
*/

Test066.java	과제
-반복문(for 문) 실습
//다중 for문(반복문의 중첩)을 활용한 별찍기 실습

//◎ 과제
//   다음과 같은 내용이 출력될 수 있도록
//   반복문의 중첩 구문을 작성하여 프로그램을 구현한다.

/* 실행 예)

    *   
   ***  
  ***** 
 *******
*********
 *******
  ***** 
   ***  
    *   
*/

Test067.java
-break 실습
// 다음과 같은 처리가 이루어지는 프로그램을 구현한다.
// 단, 입력받는 정수는 1 ~100 범위 안에서만
// 가능하도록 작성한다.

// 실행 예)
// 임의의 정수 입력 : -10

// 임의의 정수 입력 : 0

// 임의의 정수 입력 : 2022

// 임의의 정수 입력 : 10
// >> 1 ~ 10 까지의 합 : 55
// 계속하시겠습니까?(Y/N)? : y

// 임의의 정수 입력 : 100
// >> 1 ~ 100 까지의 합 : 5050
// 계속하시겠습니까?(Y/N) : N
// 계속하려면 아무 키나 누르세요 ... → 프로그램 종료.
br.reaLine()은 문자열을 받아옴! 
System.in.read()는 아스키코드를 받아옴!! 
엔터 = \r + \n입니다.
System.in.skip(2); : 대기열 엔터 스킵!!
※ break
반복문 멈추고 빠져 나가라 ~ 
가장 가까운 반복문을 빠져나간다!!
cf) continue
뒷 부분 무시하고 계속해라~~ 
→ 얘는 반복문의 처음으로 돌아갑니다! 반복문을 끝낼 수가 없어요 ~!!


Test068.java
-continue 실습

//continue 를 활용하여
// 다음과 같이 출력될 수 있도록 프로그램을 구현한다.
// 실행 예)

/*
1 : 1
3 : 4
5 : 9
7 : 16
  :
  :
  :
99: 2500
계속하려면 아무 키나 누르세요....

Test069.java
-return 실습

// ※ return 키워드가 지니는 두 가지 의미
//    ① 『값의 반환.』 return을 포함하고 있는 메소드에서 
//       지점에 값을 두고 온다..
//		  return + 무엇을 → 이런 형식


//    ② 『메소드 종료.』 return을 포함하고 있는 메소드 종료.
//        지금은 main()만 정의 중 → 프로그램 종료.
//        return; 단일.
