Test128.java
- 자바의 주요(중요) 클래스
/*
○ 개요
   
   일반적으로 클래스는 하나만 존재하는 것이 아니라
   같은 종류의 클래스를 여러개 묶어서 사용하게 되는데
   이러한 클래스나 인터페이스의 묶음을 패키지(package)라고 한다.
   → 물리적인 묶음 "폴더"
   Sun(Oracle)사에서는 자바 프로그램을
   효율적으로 작성할 수 있도록 자바 표준 패키지를 제공하며,
   자바 표준 패키지에는 그래픽, 네트워크, 데이터베이스 등의
   다양하고 유용한 클래스들이 포함되어 있다.


○ import 구문
   
   자바 표준 패키지나 사용자에 의해 외부에서 만들어진 패키지를
   사용하기 위해서는 컴파일을 수행하기에 앞서 프로그램에 포함시키는
   과정이 필요한데, 이 때 『import』문을 이용하여 패키지 또는
   클래스를 프로그램에 포함시키게 된다.
   하지만 『java.lang.*』 패키지는 자바 프로그램에 기본적으로
   import 되어 있기 때문에 이 패키지의 클래스들은 import 하지 않고
   바로 사용하는 것이 가능하다.

   import 문은 반드시 클래스 설계 구문 전에 선언되어 있어야 하며
   형식은 다음과 같은 두 가지가 있다.

   import [static] 패키지.클래스;
   import [static] 패키지.*;
   → 여기선 뭐쓰고 저기선 뭐쓸 때가 많아서 static안붙이는 경우가 일반적

   ※ JDK 1.5 부터는 import 다음에 『static』 키워드를 붙임으로써
      정적으로 패키지를 import 할 수 있는 기능을 제공하게 되었다.
	  만약 패키지를 정적으로 import 한 경우라면 모든 접근 가능한
	  메소드와 멤버 변수들은 접두사(ex → ob,br,sc 처럼...)를 붙이지 않고
	  사용하는 것이 가능하다.


○ Object 클래스
   
   『java.lang.Object』클래스는 자바 클래스의 최상위 클래스로
   자바 표준 패키지의 클래스나 사용자에 의해 작성된 모든 클래스는
   기본적으로 이 클래스로부터 상속받는다.
   따라서 자바의 모든 클래스는 『java.lang.Object』클래스의
   메소드를 가지고 있으며, 바로 사용하는 것이 가능하다.
*/
/*
import java.lang.*;
import java.lang.Object;
→ lang == 랭귀지
   명시안해도 자동.
*/
public class Test128 //extends Object
{
	/*
	Object 클래스로부터 상속받은 멤버들
	...
	...
	...
	toString()
	{
	}
	*/
	/*
	public Test128()
	{
	}
	*/
	public static void main(String[] args)
	{
		Test128 ob = new Test128();

		// 객체.xxx();
		// -- 해당 객체를 생성시키는 대상 클래스의 메소드xxx() 호출

		//Rect ob = new Rect();
		//ob.input();
		//-- ob 객체를 생성시키는 대상 클래스 → Rect
		//   Rect 클래스에 정의되어 있는 input() 메소드 호출

		// 객체.yyy();
		// -- 해당 객체를 생성시키는 대상 클래스에
		//    yyy() 메소드가 존재하지 않을 때...
		//    → 에러 발생

		//System.out.println(ob.test());
		//--==>>error: cannot find symbol 컴파일 에러
		// -- Test128클래스에 toString() 메소드가
		//    존재하지 않는 상황이기 때문에
		//    에러가 발생 상황

		System.out.println(ob.toString());
		//--==>>Test128@15db9742
		//      메모리의 주소값이 아니다.
		//      이번호는 뭐냐?
		//      자바 혼자 이거랑 저거랑 다른지 확인할라고
		//      표시해둔거임!!!!!!!!!!!!! 그냥 값임.

		//      대전제 : 변수하고 자료형 할 때,
		//      자바는 메모리 주소값에 직접적인 접근을 
		//      절대로 허용하지 않는다.★
		//      ------

		// 자바가 객체를 구분하기 위해 임의로 부여하는 식별번호
		// -- Test128클래스에 toString() 메소드가
		//    존재하지 않는 상황임에도 불구하고
		//    에러가 발생하지 않는 상황


		System.out.println(ob);
		//--==>>Test128@15db9742 
		//      위랑 똑같은 값.
		// println()메소드도 toSting()을 쓸 수 있음.
		// toString() 다른애들도 다 가지고 있는 메소드다.
	}   
}

Test129.java
- 자바의 주요(중요) 클래스
- Test128.java와 비교!
//import java.lang.*;

public class Test129 //extends Object
{

	/*
	...
	public String toString()
	{
		 ...;
	}

	...
	*/

	/*
	@Override
	public String toString()
	{
		return "재정의한 toString()...";
	}
	*/

	public static void main(String[] args)
	{
		Test129 ob = new Test129();

		System.out.println(ob.toString());
		//--==>>재정의한 toString()... 
		

		System.out.println(ob.hashCode());
		//-- toString()이랑은 또 다름.
		System.out.println(ob);
		//--==>>재정의한 toString()...

		// println()에서 쓰는 toString()이 같은거구나!
		// 오버라이딩해서 덮어쓰기 했구나!
	}
}

/*
재정의한 toString()... (오버라이딩 전에는 Test129@15db9742 였음)
366712642
재정의한 toString()...
계속하려면 아무 키나 누르십시오 . . .
*/

※ 오버라이딩하면 다시 못돌아감.
   hashCode랑 toString은 다름.
   toString값이 주소값이 아님
   클래스@무슨값 이거임. → ※ 『클래스명@해시코드』

===========================================================================
Object 클래스
Test130.java
- 자바의 주요(중요) 클래스
- Object 클래스
※ 『==』 비교 연산자는 피연산자의 크기를 비교함을 확인(관찰)
System.out.println("ob1 == ob2 : " + (ob1 == ob2));
		//--==>>ob1 == ob2 : false

		// ※ 객체(Object)들을 비교하는 과정에서 사용하는 『==』 연산자는
		//    크기를 비교하는 것이 아니라 객체의 주소를 비교.
		//    물론 사용자에게 주소를 직접적으로 알려주지는 않지만
		//    자바가 내부적으로 비교를 한다.

System.out.println("ob1.equals(ob2) : " + (ob1.equals(ob2))); 
		//--==>>ob1.equals(ob2) : false

		// ※ 『==』 연산자와 Object 클래스의 『equals()』 메소드는
		//     동일한 개념으로 객체의 주소를 비교.
		//     둘 다 주소 비교!
System.out.println("ob1            : " + ob1);
		System.out.println("ob1.toString() : " + ob1.toString());

		System.out.println("ob2            : " + ob2);
		System.out.println("ob2.toString() : " + ob2.toString());

		/*
		ob1            : Test@15db9742
		ob1.toString() : Test@15db9742
		ob2            : Test@6d06d69c
		ob2.toString() : Test@6d06d69c
		*/

		//※ 『클래스명@해시코드』


		//※ 해시코드(hashcode)
		//   : 자바 내부적으로 객체를 구분하기 위해 사용하는 것.
		//     메모리의 주소값으로 생각하면 절대로 안된다.

		//※ 객체가 같으면 hashcode(해시코드)가 같지만
		//   hashcode(해시코드)가 같다고 같은 객체는 아니다.

Test131.java
- 자바의 주요(중요)클래스
- Object 클래스
NewCar nCar3 = nCar1;   // -- 객체 복사 → 얕은 의미 복사(참조형)
			// -- 주소값 복사
               ↓↓↓
     이러면 주소값이 같아지니 equals()나 == 연산자의 값이 true로 됨.
     또한 toString()도 같은 값을 가지게 됨.

//getClass()
		System.out.println("5-1 : " + nCar1.getClass());
		System.out.println("5-2 : " + nCar2.getClass());
		System.out.println("5-3 : " + nCar3.getClass());
		//--==>>5-1 : class NewCar
		//		5-2 : class NewCar
		//		5-3 : class NewCar
		// → 생성된 객체를 통해
		//    해당 객체의 기반 설계도를 확인할 수 있는 기능을 가진 메소드
		System.out.println();
//clone() //-- 객체 복사

		// finalize() //-- 객체 직렬화(자바 마지막 시간에 배울거에용)

		// 기타 나머지 메소드는 스레드 처리와 관련이 있다.
		// 스레드는 일단은 안한다....
		// 웹 다하고 시간 남으면 네트워크랑 스레드할거야.
Object 클래스 끝
===========================================================================
Wrapper 클래스
Test132.java
- 자바의 주요(중요)클래스
- Wrapper 클래스
○ Wrapper 클래스
  
   1. 자바에서는 언어 수준에서 제공하는 기본형 데이터를 제외한
      나머지는 클래스로 정의하여 객체 단위로 처리한다.
	  따라서 자바에서는 이러한 기본형 데이터를
	  객체 단위로 처리할 수 있도록 클래스를 제공할 수 밖에 없는데
	  이러한 클래스들을 가리켜 Wrapper 클래스라 한다.

   2. 기본 자료형인
       byte, short, int,     long, float, double, char, boolean 형에 대응하는
	   Byte, Short, Integer, Long, Float, Double, Character, Boolean
	   → 얘네를 통틀어서 뤱펄클래스라고 합니다!
	   Wrapper 클래스 및 큰 숫자들을 다루기 위한
	   java.math.BigInteger와 java.math.BigDecimal 클래스를 제공한다.

	   Wrapper 클래스는 java.lang 패키지에 포함되어 있으므로
	   별도의 import 과정 없이 바로 사용하는 것이 가능하며
	   기본형과 마찬가지로 Wrapper 클래스도 내부 메소드를 통해
	   형 변환이 가능하고 동등 비교와 같은 연산도 가능하다.

	   ex) java.lang.Integer 클래스
	       int 기본 자료형의 Wrapper 클래스로
		   정수를 다루는데 필요한 상수나 메소드, 진수 변환 등에 필요한
		   메소드 등을 포함하고 있다.

		   static int parseInt(String s)
		   문자열 형식으로 지정된 숫자를 정수 형태로 변환한다.

		   static Integer valueOf(int i)
		   int 형을 Integer 형으로 변환한다.

		   byte byteValue(), int intValue(),
		   shor shortValue(), long longValue(),
		   float floatValue(), double doubleValue()
		   해당 기본 자료형으로 형 변환한 값을 반환한다.

아하~ 프리미티브 자료형은 값타입이고
      Wrapper 형은 객체라 참조타입이겠다.
*/

/*
○ 오토 박싱(Auto-Boxing)과 오토 언박싱(Auto-Unboxing)

   일반적으로 레퍼런스 형과 기본 자료형은 호환되지 않으며
           객체는 레퍼런스타입    == 프리미티브
		   사용하는 메모리 구조가 다름
		   메모리 구조가 다르면 연산이고 나발이고 안돼
		   그래서 형변환해서 관리하고 처리하고 유지해 데이터를
		   형변환이 없으면 각기 다른 메모리구조에 있는 데이터를
		   처리할 수가 없다!!!
   이 경우 발생하는 문제 해결을 위해 자바에서는 Wrapper 클래스를 제공하게 되었다.
   하지만 JDK 1.5 부터 레퍼런스 형과 기본 자료형이
   다음과 같이 형 변환이 가능하게 되었다.
   → 여전히 호환은 안돼
       자바가 복잡하게 하나하나 형변환하던거
	   자동으로 해주는거임.
	   

   int a = 10, b;
   Integer ob;
   //-- 설계도가 어디있는거지
   //   인스턴스 생성도 안해서 메모리 할당도 안돼
   //   몇바이트인지도 몰라
   
   ob = a;
        근데도 여기에 a를 담는대 이게 자바가 해줘

        기본 자료형(int)이 Integer 형으로 자동 변환
		통통 튀는 프리미티브형을 객체에 넣는걸 오토 박싱
		실제로는 『ob = new Integer(a);』
		                --------------
						int를 매개변수로 받아 객체를 생성하는
						생성자가 있긴 있어요 이건 박싱

   b = ob;
   	   클래스안에 정적으로 들어있던 억압되었던 애들을
	   프리미티브로 풀어주는걸 자바가 자동으로 해주면
	   오토 언박싱

		실제로는 『b = ob.intValue();』
   이는 JDK 1.5 이후 추가된 오토 박싱 / 오토 언박싱이라는
   기능으로 인해 가능해진 것이다.
*/
- 레퍼런스 형(참조 타입) 과 기본 자료형(기본 타입)은 호환되지 않는다.
-Object d = new Integer(10); → 업캐스팅
-배열은 인덱스로 하나하나 값에 접근, 값타입의 모음이라 보면 됨.
//-- 결론!
		//   객체에 프리미티브형 담고 뺄때 
		//   원래는 안돼
		//   근데 자바가 해줘 그러면 오토박싱 오토언박싱
		//   내가 하면 Wrapper클래스 생성자로 박싱 언박싱
Test133.java
- 자바의 주요(중요) 클래스
- Wrapper 클래스
ni = Integer.parseInt("0101",2); //--오버로딩    문자열을 2진수로 반환하겠다.

sn = Integer.toBinaryString(20);
		System.out.printf("sn : %s\n",sn);
		//--==>>sn : 10100
		// 아 toBinaryString() 얘도 static 클래스 메소드구나
		// 인스턴스 생성없이 쓸 수 있기때문에
		// to ~ () 는 변환을 수행하는 메소드구나~
int n3 = 345;
		Integer n4 = Integer.valueOf(n3);
		System.out.println(n4); // 클래스명@해쉬태그가 아니라 값이 나오는구나
		//--==>>345
Test134.java
- 자바의 주요(중요)클래스
- Wrapper 클래스
//int a1 = 23424242424242424l; 
		//System.out.println(a1);
		//long b1 = 23424242424242424l;
		//long b1 = 23424242424242424l;
		//long b1 = 234242424242424241231231312313L;
		//long 보다 커서 접미사 붙혀도 안담겨요 컴파일에러
		//System.out.println(b1);	
		
		// 클래스 존재 목적 : long 에서 마저도 표현 못하는 수가 있다.
		//                    매개변수로 상수를 못해
		//                    위 이유 때문에.
		// ※ 정수형태로 만드는 클래스는 문자열형태로 수를 넘겨준다.
		BigInteger a = new BigInteger("234242424242424241231231312313");
		BigInteger b = new BigInteger("234242424242424241231231312313");

BigInteger c = a+b;
System.out.println(c);
error: bad operand types for binary operator '+'
→ 객체간의 연산은 저딴식으로 불가.
		// 더하기
		// a를 기준으로 매개변수를 더해라.
		BigInteger c = a.add(b); 

		//빼기
		BigInteger d = a.subtract(b);

		//곱하기
		BigInteger e =a.multiply(b);

		//나누기
		BigInteger f = a.divide(b);

		BigInteger g = new BigInteger("2");
		System.out.println("2의 3승 : " + g.pow(3));

Test135.java
-자바의 주요(중요)클래스
-Wrapper 클래스
		//movePointLeft()
		//소수점을 왼쪽으로 이동
		BigDecimal b = a.movePointLeft(3);
		System.out.println("b 처리 결과 : " + b);
		//a  :           1234543452.23424325252
		//b 처리 결과  : 1234543.45223424325252

		//static final 상수. 
		//BigDecimal.ROUND_DOWN
		//나눗셈 연산 (대체 속성 확인, 반올림 하지 않는다. → 절삭)
		BigDecimal c = a.divide(b, BigDecimal.ROUND_DOWN);
		System.out.println("c 처리결과 : " + c);
		//a  :           1234543452.23424325252
		//b 처리 결과 :  1234543.45223424325252
		//c 처리결과 :   1000.00000000000

		//a.toBigInteger(); 다시.
		System.out.println("a를 변환 시킴 : " + a.toBigInteger());
		//a  :           1234543452.23424325252
		//a를 변환 시킴 :1234543452.23424325252
		//계속하려면 아무 키나 누르십시오 . . .

Test136.java
- 자바의 주요(중요)클래스
- Wrapper 클래스
public class Test136
{
	//java.lang.Number 클래스(추상 클래스)는
	//모든 숫자형 Wrapper 클래스들의 부모 클래스
	//(슈퍼 클래스, 상위 클래스)이다.
	//b2, i2자료형이 Number에 들어오면서
	// 업캐스팅이 일어난다.
	// Auto-Boxting이 일어나게 된다. 인스턴스 생성하면서.
	//                        ↓3
	static void printtt(Number n) //--Byte, Integer, ... 등 가능.
								  //--매개변수를 Object로 안하는 이유 : 안정성때문에.
								  //--자바스크립트에서는 변수 자료형을 선언안해
								  //   그래서 쓸 때가 불편함. 같은 이유.
								 
						
	{
		 //System.out.println("print 오버로딩 : " + o.getClass());
		 System.out.println(n);
		 System.out.println(n.intValue());
		 //--문제인식 잘못! 이미 업캐스팅 된것을 가져와라 이거임.

		 


	}
int i = 256;
		Integer i2 = new Integer(i);
		//print(b2);
		//print(i2);
		System.out.println(i2.hashCode()); //-- 이거 못돌아가. 값 넣었어.
* 프리미티브형은 값타입이라서 toString()과 hashCode()를 사용할 수 없다. 당연; ;;

Wrapper클래스도 자동형변환 가능
int i4 = b2.byteValue();
		System.out.println(i4); //3
		//byte b4 = i2.intValue(); //--자동형변환 위배. 컴파일에러.

But!!
b4 = (byte)i2.intValue(); //--이거도가능
		System.out.println(b4);//0
		//int형을 byte타입으로 타입은 맞는데 0으로 나옴.
		//잘못된 값으로 나오는거임!!!!!!!!!!!!!!!!!!!!!!check!!!!!!!!!!!●●●●●●●

Test137.java
-자바의 주요(중요)클래스
-Wrapper클래스
		System.out.println(Integer.MAX_VALUE);
		System.out.println(Integer.MIN_VALUE);
		// 인스턴스 생성과정 거치지 않음 → static final
		//--==>>2147483647
		//	    -2147483648

		System.out.println(Double.MAX_VALUE);
		System.out.println(Double.MIN_VALUE);
		//--==>>1.7976931348623157E308
		//		4.9E-324
		// ※ e 표기법



		//실수 기반의 나눗셈 연산
		System.out.println("1 : " + 3.0/0);
		//--==>>1 : Infinity
		System.out.println("2 : " + -3.0/0);
		//--==>>2 : -Infinity
		System.out.println("3 : " + (3.0/0 == 3.0/0));
		System.out.println("4 : " + (3.0/0 == -3.0/0));
		//--==>>3 : true
		//		4 : false
	※자바는 무한대 == 무한대 라고 처리하고
	      무한대 != -무한대
              무한대에 대한 true/false는 
              『부호』만 생각..!

		//『Double.isInfinite()』
		//if~() 뭐뭐인지 아닌지를 판단하는 true,false 반환 
		//to~() 변환하는 메소드
		isNaN() 도 있음!!
		//부호를 가리지 않고 무한대만 판정해주는 메소드
	※『부호』는 생각하지 않고
           그저 무한대면 true를 반환!!

		System.out.println("7 : " + (3.0/0 + -3.0/0));
		System.out.println("8 : " + (0.0/0));
		//--==>>7 : NaN (→ Not a Number) 숫자가 아닙니다.
		//--==>>8 : NaN (→ 즉, 모든 수를 0으로 나눈다해서 Infinity가 아니다.)
	※ 수 / 0 + 수 / 0 → NaN
           0 / 0           → NaN
           Infinity + -Infinity는 NaN



	※ Nan(Not a Number) 값과 임의의 수를 
	   『==』연산자를 통해 비교 연산을 수행하게 되면
	   결과는 언제나 『false』를 반환한다.
	   비교 불가능!


	※자바는 Infinity도 하나의 숫자로 생각한다.
Wrapper 클래스 끝
===========================================================================
String 클래스
Test138.java
-자바의 주요(중요)클래스
-String 클래스
// String 클래스 (소개에서는 골칫거리)
// 메모리 쪼금 줄라면 일기쓰고 많이 줬더니 hi이러고 있음.
// 프리미티브 자료형으로 표현 못해.
//배열은 동질의 성격들 모음.
//★★★★★String은 내용을 변화시킬 수 없다.★★★★★
cf) 자바스크립트 서블릿 문법

○ String 클래스는 내부 문자열 데이터에 대한 수정이 불가능하다.
   (즉, 내용 불변 : Immutable)
   문자열의 내용이 변경되면 새로운 객체를 생성하며
   참조 대상을 잃어버린 객체는 가비지 컬렉션의 대상이 되고,
   새로운 객체에 새 주소를 할당하게 되므로
   해시코드도 변하게 된다.

○ String 클래스 간에 『+』연산자를 사용하게 되면
   문자열 간의 결합이 가능하며,
   String 클래스와 다른 클래스 객체, 또는 기본형 데이터 간에
   『+』 연산자를 사용하는 경우에도
   내부적으로 자동 String 클래스로 변환이 가능하다.

   ※ 눈으로 확인되는 결과는 이렇지만...
      String은 내용을 변경할 수 없기 때문에
	  『+』 연산자를 사용하게 되면
	  내부적으로 StringBuffer 를 생성하여	→ StringBuffer가 상위 클래스? No 아님. 생성자 오버로딩 중에 String(StringBuffer buffer) 이게 있음. 매개변수를 객체로 받아옴.
	  append() 메소드를 이용하여
	  문자열에 대한 결합을 수행하게 된다.
	  따라서 동적인 문자열을 많이 사용하는 Servlet 등에서는
	  되도록이면 String 을 사용하는 것 보다
	  StringBuffer 나 char[] 을 사용하는 것이 효율적일 수 있다.

	  ==> 정적인 문자열을 처리하는 경우에는 주로 String 클래스를 사용
	      동적인 문자열을 처리하는 경우에는
		  런 타임 시 동적으로 처리해주는 StringBuffer 클래스를
		  사용하는 것이 효율적이다.

○ String 객체의 생성 및 특징

   String 객체를 생성하는 방법은
   ① 문자열 상수를 지정하는 방법과
   ② String 클래스의 생성자를 이용하는 방법
   이렇게 두 가지 방법이 있다.

   String str1 = "Java";
   String str2 = new String("Java");

   하지만 『문자열 상수』를 대입 연산자를 사용하여
   지정하는 방법을 통해 객체를 생성하는 경우와
   『new』 연산자를 이용하여 객체를 생성하는 것은
   의미가 다르다.


객체 == 객체 
- 주소 비교
- 해쉬태스랑 주소는 다름. 연관이없다.
- 해쉬태그로는 주소의 값에 접근할 수 있는 구조 ㄴㄴ
- 주소를 통해야 주소의 값에 접근할 수 있음.
- 참고로 자바는 사용자에게 메모리에 대한 직접적인 접근을 허용하지 않음.
- 해쉬태그는 객체에
- 주소는 참조타입! 둘이 완전 다른거임!!



※String클래스의 equals()는 
  Object의 메소드를 오버라이딩(재정의)해서
  문자열을 비교한다.
 _____________________
		String s1 = "seoul";
		String s2 = "seoul";
		String s3 = new String("seoul");
		String s4 = new String("seoul");

		System.out.println(s1 == s2);
		//--==>>true
		System.out.println(s1 == s3);
		//--==>>false
		System.out.println(s1 == s4);
		//--==>>false

		System.out.println(s1.equals(s2));
		System.out.println(s2.equals(s3));
		System.out.println(s3.equals(s4));
		System.out.println(s4.equals(s1));
		//true
		//true
		//true
		//true

		//※ s1과 s2객체가 참조하는 문자열 상수가 동일한 경우
		//   문자열이 젖아된 기억장소의 영역이 동일하기 대문에
		//   s1 객체와 s2객체는 동일한 기억 장소를 참조하게 된다.
		//   하지만,
		//   s3와 s4는 동일한 영역이 아닌 다른 기억 공간을
		//   새롭게(new) 확보하여 문자열 상수를 그 공간에
		//   대입한 경우이므로
		//   두 인스턴스는 같은 영역을 참조하는 것이 아니다.
		//   따라서 『s3 == s4』는 거짓이 되며
		//   만약 같은 문자열 상수인지의 여부를 비교해야 할 경우라면
		//   『equals()』 메소드를 이용해야 한다.
		//※ String 클래스는 Object의 equals() 를 Overriding~!!



		System.out.println("s1 : " + s1);
		System.out.println("s2 : " + s2);
		System.out.println("s3 : " + s3);
		System.out.println("s4 : " + s4);

		//--==>>s1 : seoul
		//		s2 : seoul
		//		s3 : seoul
		//		s4 : seoul
		
		System.out.println("s1 : " + s1.hashCode());
		System.out.println("s2 : " + s2.hashCode());
		System.out.println("s3 : " + s3.hashCode());
		System.out.println("s4 : " + s4.hashCode());
		//--==>>s1 : 109324212
		//		s2 : 109324212
		//		s3 : 109324212
		//		s4 : 109324212

		//※ 객체가 같으면 해쉬코드가 같지만
		//   해쉬코드가 같다고 해서 같은 객체는 아니다.



		s2 += "korea";
		System.out.println(s2);
		s2 = "korea";
		System.out.println(s2);
		//--==>>seoulkorea
		//		korea

		//--이와 같은 경우
		//  s2 가 참조한 seoul이 저장된 영역은
		//  『s2 += "korea";』수행되는 시점에서
		// 가비지 컬렉션의 대상이 되며
		// "seoulkorea"상수가 저장된 영역을
		// s2가 참조하게 되었다가
		// 다시 s2가 참조한 "seoulkorea"가 저장된 영역은
		// 『s2 = "korea";』가 수행되는 시점에서
		// 가비지 컬렉션의 대상이 되며
		// "korea"문자열 상수가 새롭게 저장된 영역을
		// s2가 참조하게 된다.
		//==> ※ String 객체의 내용은 불변이다~!!!



Test139.java
- 자바의 주요(중요)클래스
-String 클래스
■ 문자열 추출 메소드 s.substring(6,9);
		//※ 『String.substring(s,e)』
		//    String 문자열을 대상으로
		//    s 번째에서 e-1번째까지 추출
		//    (단, 인덱스는 0부터 시작)
		// ※ 『String.substring(s)』★★★ Oracle substring이랑 헷갈리지 않게 잘 정리해라
		//     String 문자열을 대상으로
		//     s번째에서 끝까지 추출
		//     (즉, 문자열이 가진 길이만큼. ..)

■ 문자열의 데이터(값)비교 s.equals(); 대소문자 구분.
		System.out.println(s.equals("seoul korea"));
		System.out.println(s.equals("seoul Korea"));
		//--==>>true
		//	false
■ 문자열의 데이터(값)비교 s.equalsIgnoreCase(); 대소문자 구분안함.

■ 찾고자 하는 대상 문자열(s)에 『kor』 문자열이 존재할까? 
   존재한다면... 그 위치는 어떻게 될까? s.indexOf("찾는문자열");

		System.out.println(s.indexOf("kor"));
		//--==>>6
		//인덱스번호 반환


		System.out.println("대문자를 indexOf가 구분할까? : "+s.indexOf("K"));
		//--==>>대문자를 indexOf가 구분할까? : -1 
		// 못해!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		System.out.println(s.indexOf("ea"));
		//--==>>9

		System.out.println(s.indexOf("e"));
		//--==>>1 두번째인거 e 찾음

		System.out.println(s.indexOf("아"));
		//--==>>-1
		// -- 찾고자 하는 문자열이 대상 문자열에 존재할 경우
		//    그 문자열의 인덱스를 반환하지만
		//    존재하지 않을 경우 음수를 반환하게 된다.
		//    -1일거라는 보장이 없기 때문에 『음수』라 표현합니다!

■ 찾고자 하는 대상 문자열(s)에 『e』문자열이 존재할까?
   존재한다면 그 위치는 어떻게 될까? s.lastIndexOf("찾는문자열");
   (단, 뒤에서부터 검사)

		System.out.println(s.lastIndexOf("e")); // ●
		//--==>>9
		//1. 뒤에서 부터 찾다가 찾으면
		//2. 앞에서부터 인덱스를 세서
		//3. 인덱스 번호 반환
		System.out.println(s.lastIndexOf("o"));
		//--==>>7

■ 대상 문자열(s) 중, 『6』번째 인덱스 위치의 문자는? s.charAt(6);

		//"seoul korea"
		System.out.println(s.charAt(6));
		//--==>>k
		//System.out.println(s.charAt(22));
		//--==>>Exception in thread "main" java.lang.StringIndexOutOfBoundsException: String index out of range: 22
		// 런타임 에러
		// subString() 할때 array인덱스 에러랑 같이 생각.

■ 대상 문자열(s)이 『rea』로 끝나는지의 여부 확인 s.endsWith("찾는문자열");
   (true/false) 반환
		System.out.println(s.endsWith("rea"));
		//--==>>true
		System.out.println(s.endsWith("oul"));
		//--==>>false

■ 대상 문자열(s)과 비교 문자열 『seoul corea』 중
   어떤 문자열이 더 큰가? → 문자열에 대한 크기 비교
   두 문자열이 같다면 → 0
   두 문자열이 다르다면 → 차이를 확인(사전식 배열)  s.compareTo("비교문자열");
   대소문자 구분함.

		System.out.println(s.compareTo("seoul korea"));
		//--==>>0
		
		System.out.println(s.compareTo("seoul corea"));
		//--==>>8
		//-- c - k→ defghijk → 8
		System.out.println("대문자랑은 사전식 배열 차이 k랑 K"+s.compareTo("seoul Korea"));
		//--==>>대문자랑은 사전식 배열 차이 k랑 K32

■ 대상 문자열(s) 중, 해당 문자열을 찾아서 원하는 형태로 수정 s.replaceAll("해당문자열","바꿀문자열");

		s = "사랑하는 우리 엄마";
		s = s.replaceAll("엄마","지여사");
		System.out.println("처리 결과 : " + s);
		//--==>>처리 결과 : 사랑하는 우리 지여사

■ 공백 제거 s.trim();

		s = "          사         랑              ";
		System.out.println("|||" + s + "|||");
		//--==>>|||          사         랑              |||


		System.out.println("|||" + s.trim() + "|||");//●
		//--==>>|||사         랑|||
		//1.앞에공백 (하나씩)제거하면서 뭐가 있으면 멈춰
		//2.뒤에공백 (하나씩)제거하면서 뭐가 있으면 멈춰

		//양족 가장자리 공백 제거


		//trim() 가장자리부터 접근한다. 양쪽공백 다 제거.
		//손톱깎기처럼 깎은건 버리고 남은걸 가짐.
		//다른메소드는 남은걸 버리자나
		//Oracle에서 써. 그냥 trim없고 ltrim, rtrim

		System.out.println("|||" + s.replaceAll(" ","") + "|||");
		//--==>>|||사랑|||
		//공백있는 문자를 공백없는 문자로 바꿔라.

■ 숫자처럼 생긴 문자열을 넘기면 숫자로 반환해라. parseInt("숫자처럼생긴 문자열");
※ printf()랑 format()은 그대로 사용가능하지만.
   String클래스의 format()은 "이런 형태의 문자열로 『반환』하라" 라서
   단독으로 쓸 수 없음!

		//사용법은 같다.
		s = String.format("%d",n); //그래서 단독으로 못써
		System.out.println(s);
		System.out.println();
		//--==>>2345678

		s = String.format("%,d",n);
		System.out.println(s);
		//--==>>2,345,678




		//String str = " 기본,열정,배려";
		//String [] strArr = str.split(",");
		// ↑	↓ 같은 구문

		String [] strArr = "기본,열정,배려".split(",");
		
		for(String str :strArr)
			System.out.print(str + " ");

		System.out.println();
		//--==>>기본 열정 배려


String클래스 끝
===========================================================================
StringBuffer 클래스
Test140.java
-자바의 주요(중요) 클래스
- StringBuffer 클래스
○ StringBuffer 클래스는
   문자열을 처리하는 클래스로 String 클래스와의 차이점은
   String 클래스는 내부 문자열 데이터의 수정이 불가능하지만
   StringBuffer 클래스는 문자열을 사용할 때
   내부 문자열을 실행 단계에서 변경할 수 있다.


   즉, StringBuffer 객체는 가변적인 길이를 가지므로
   객체를 생성하는 시점에서 미리 그 크기나 값을 지정하거나
   실행 시점에 버퍼의 크기를 바꿀 수 있는 기능을 제공한다.

   또한 JDK 1.5 이후부터는
   문자열을 처리하는 StringBuilder 라는 클래스도 제공한다.
   → String과 StringBuffer보다 역사가 짧음.
   StringBuilder 클래스의 기능은 StringBuffer 클래스와 동일하지만
   가장 큰 차이점은 muti-thread unsafe 라는 점이다.
                    ------------------
					다중 처리가 안전하지 않다.
   즉, Syncronization 이 없기 때문에
   StringBuffer 보다 빠르며 동시성(동기화)문제가 없다면
   StringBuilder 를 사용하는 것이 성능을 향상시킬 수 있다.

   기능이 많다고 성능이 좋은게 아님.
   다중 처리 가능한건 StringBudffer 기능이 많음.
   StringBudiler 성능이 좋음
   하나에 기능에 만능이면 성능이 좋다는 거임.

		StringBuffer sb1 = new StringBuffer("korea");
		StringBuffer sb2 = new StringBuffer("korea");

sb1 == sb2      → false
sb1.equals(sb2) → false

● String 클래스에서는 『==』할 때는 주소 비교!
                       『equals()』할 때는 문자열 자체를 비교했어.

                       ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
 			Object의 equals() 메소드를 오버라이딩 했구나!

● StringBuffer 클래스에서는 『==』,『equals()』의 결과가 모드 false로
                             주소만을 비교했어! 즉, 이것은
                             Object의 equals() 메소드를 오버라이딩 하지 
                             않았다는 증거야!


●StringBuffer클래스.toString() → 문자열 반환
  ______________________________
  이거 자체가 String 클래스 객체가 됨.

  차근차근 볼까?
  toString() → Object 메소드
  Object의 toString() → 클래스명@해쉬코드를 반환
  
  하지만, StringBuffer클래스의 toString()은 → 문자열 반환
  즉, 오버라이딩을 했구나!

● Object 객체에서 『==』,『equals()』는 객체의 주소 비교!!

● StringBuffer 기본적으로 생성되는 버퍼의 크기는 『16』

■ 버퍼 크기 함수 capacity()
   내용물이 추가 되면 버퍼 크기가 커짐.
   늘어난 버퍼 크기는 그대로이다.
   → 버퍼 크기 조절 메소드가 있다.
      현재 문자열을 담아둘 수 있는 버퍼의 크기로...
      trimToSize(); 


name = "홍길동";
name += "이순신";
name += "강감찬";

→ 이 방법 String으로 하면 존나존나 비효율적임
   계속 ~ 메모리 다시 할당 (※왜냐하면 String은 내용을 변화시킬 수 없다)때문
   원래 메모리는 가비지 먹이로 줌.

■ append("뒤에 붙힐 문자열");

■ String 함수 : toUpperCase()
   문자열 전부 대문자로 바꿈.

■ String 함수 : toLowerCase()
   문자열 전부 소문자로 바꿈.

String = StringBuffer.toSting();
→ StringBuffer의 내용이 바뀌는게 아님.
   바꾼상태를 String에 넣어라. 이거임.

■ StringBuffer 함수 : insert(0,"한국"); StringBuffer의 값이 바뀜.
   대상 문자열 중 seoul앞에 "한국"이라는 문자열 추가.
   원본 0의 앞부터 시작해서 한국 넣어라.

// return 자료형만 보고는 객체의 값이 바뀌는걸 장담할 수 없지만.
// void인 경우 바뀌는 경우가 많음.

■ StringBuffer 함수 : delete(14,18); StringBuffer의 값이 바뀜.
   뒤에 매개변수-1까지. 삭제.
   delete(int,int)
   insert()와 다른 점, 어디서 부터 ~ 어디 라는 인덱스 범위를
   매개변수로 가짐. "글자"의 직접적인 문자열을 매개변수로 가지지
   않음!



Test141.java
-자바의 주요(중요)클래스
-StringBuffer 클래스

①
String s1 = "123456789";
s1 = (s1 + "123").replace('2','A');
System.out.println(s1);
▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
1. s1 = ("123456789123").replace('2','A');
2. s1 = "1A34567891A3"



②
StringBuffer s2 = new StringBuffer("123456789");
s2.delete(0,3).replace(1,3,"24").delete(4,6);
▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
1. "123456789".delete(0,3).replace(1,3,"24").delete(4,6);
2. "456789".replace(1,3,"24").delete(4,6);
3. "424789".delete(4,6);
4. "4247"


③
StringBuffer s3 = new StringBuffer("123456789");
String s4 = s3.substring(3,6);
System.out.println(s4);
▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
1. String s4 = "123456789".substring(3,6);
2. String s4 = "456";



④
StringBuffer s5 = new StringBuffer("123456789");
s5.delete(0,3).delete(1,3).delete(2,5).insert(1,"24");
▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
1. "123456789".delete(0,3).delete(1,3).delete(2,5).insert(1,"24");
2. "456789".delete(1,3).delete(2,5).insert(1,"24");
3. "4789".delete(2,5).insert(1,"24");
4. "47".insert(1,"24");
5. "4247".insert(1,"24"); 
            → 1앞에 24추가요
StringBuffer 클래스 끝
===========================================================================






	