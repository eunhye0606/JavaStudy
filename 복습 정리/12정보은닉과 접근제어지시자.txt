Test100.java
-정보 은닉과 접근 제어 지시자(접근지정자, 접근제한자...)
	// 정보 은닉(Information Hiing)
	// 멤버 변수,인스터스 변수 ,전역 변수
	// 『private』이라는 접근제어지시자의 선언은
	// 클래스 내부에서만 접근 및 참조가 가능하게 하겠다는 의미.
	// ↓ 
	// CircleTest2 의 멤버 변수 선언, 인스턴스 변수, 전역변수
	//int num;	//→ 인스턴스 생성 시, 메모리 할당 받음.
접근제어 지시자
=접근 지정자
=접근 제한자
=접근 제어자

public    : 모든 접근 허용

protected   : 

(default)   : 접근제어 지시자 안쓰면 디폴트

private   : 나혼자만 접근 허용 == 클래스 내부에서만 접근 및 참조가 가능하게 하겠다는 의미.

              ■■■접근제어 지시자의 관계■■■

지시자	 클래스 내부    동일패키지    상속받은 클래스    이외의 영역

private      O              X               X                X

default      O              O               X                X

protected    O              O               O                X

public       O              O               O                O

            <접근제어의 허용범위>
※ public > protected > defalt > private
   넓다                           좁다

①   접근제어 지시자를 아무것도 붙히지 않으면 default이다.

②   default vs protected 
     『상속받은 클래스』
     protected만 가능.

ex) public class Test000
    ______
    접근제어지시자

{
	public static void main(String[] args)
	{
		(default) int a;
		_________
		접근제어지시자
	}
}

Test101.java
-클래스 설계
-배열 활용
-접근제어지시자와 정보은닉


// 사용자로부터 년, 월, 일을 입력받아
// 해당 날짜의 요일을 출력하는 프로그램을 구현한다.
// 단, 달력 클래스(Calendar)는 사용하지 않는다.
// 또한, 클래스의 개념을 활용하여 작성할 수 있도록 한다. (→WeekDay 클래스 설계)
// 그리고, 배열의 개념도 적용시켜서 작성할 수 있도록 한다.
// 접근제어지시자의 개념도 확인하여 작성할 수 있도록 한다.
// 최종적으로 WeekDay 클래스 설계를 통해
// Test101 클래스의 main() 메소드가 정상적으로 프로그램 실행 될 수 있도록 한다.

// ※ 1년 1월 1일 → "월요일"

// 실행 예)
// 년 월 일 입력 (공백 구분) : 2022 1 19
// 2022년 1월 19일 → 수요일
// 계속하려면 아무 키나....

// 2000년 5월 4일 → 목요일
// 계속하려면 아무 키나....
