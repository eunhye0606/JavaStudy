Test119.java
-클래스 고급
-인터페이스(Interface)
○ 인터페이스(Interface)란
   
   완전히 미완성된 채로 남겨져
   인터페이스 안에 존재하는 그 어떤 메소드도
   몸체(정의부)가 없기 때문에 사실상 실행 부분이 존재하지 않는다.
   클래스를 위한 템플릿으로써의 기능을 수행하는
   추상 클래스의 한 종류이다.

   → 추상 클래스 인스턴스 생성 불가
      아직 미완성이기 때문에!

○ 인터페이스는 클래스와 달리 다중 상속이 가능하며
   인터페이스 자체도 상속된다.
   기존의 C++ 언어 등에서 지원되는 다중 상속이
   사용 과정에서 많은 문제점을 노출시켰기 때문에
   자바에서는 다중 상속의 개념을 인터페이스라는 개념으로 변형하여
   인터페이스를 통해 다중 상속을 구현하는 방법을 지원한다.


○ 인터페이스는 상수와 추상 메소드만 가질 수 있으며
   인터페이스 안의 메소드들은 접근제어지시자를 명시하지 않아도
   『public』으로 설정되어 클래스에서 구현(implements)함으로써
   바로 접근이 이루어질 수 있다.

○ 특징
   - 추상 클래스의 일종으로 선언만 있고 정의가 없다.
   - final 변수는 가질 수 있다.(상수의 개념)
   - 인터페이스는 『public static final』 상수만 만들 수 있다.
   - 인터페이스를 구현하기 위해서는 『extends』 대신에
     『implements』를 이용한다.
   - 하나 이상의 인터페이스를 implements할 수 있다.
   - 인터페이스의 모든 메소드를 Overriding 해야 한다.

   	 → 추상 메소드는 모두 Overriding 해야한다.

   - 인터페이스가 다른 인터페이스를 상속받을 수 있으며
     이 때, extends 키워드를 사용한다.
	 →implemants 인터페이스A extends 인터페이스B. 인터페이스C..
	 또 한, 클래스와 달리 인터페이스는 다중 상속이 가능하다.
   */
// 인터페이스의 멤버 변수는
	// 『static final』을 별도로 명시하지 않아도
	// 자동으로 『static final』인 상태~!!!

// 인터페이스의 메소드는 선언만 가능(정의 불가)
	// 자동으로 『abstract』인 상태
	// public abstract void print();
//클래스
//class DemoImpl
//class DemoImpl extends Demo //--(X)
//class DemoImpl implements Demo
//                  ↓
// implements하는 순간. 추상 클래스가 됨.

-Override하는 순간 자식 클래스앞에 abstract뗼 수 있음.
-인터페이스는 인스턴스 생성 불가
//Demo ob = (Demo)obTemp;
//Demo ob = obTemp; 같은겨

// ○ 업 캐스팅
// 인터페이스 객체는 상위 객체
Demo ob = new DemoImpl();
//-----   --------------
// 상             하

Test120.java
- 클래스 고급
- 인터페이스(Interface)
※ 인터페이스는 2개 이상을 구현(implements)할 수 있다.
   → 다중 상속이 되지 않는 부분을 보완(보충)하는 개념.

// JDK 1.5(5.0)에서는 인터페이스 메소드를
// 오버라이팅(OVerriding) 할 때
// 『@Overriding』 어노테이션(annotation)을 사용할 수 없다.
// 단, 상속받은 클래스의 메소드를 오버라이딩(Overriding)할 때에는
// JDK 1.5에서도 『@Overriding』 어노테이션(annotation) 사용이 가능하다.

((BDemo)ob2).print();
		((ADemo)ob3).write();
		//--==>>BDemo 인터페이스 메소드 print()...
		//		ADemo 인터페이스 메소드 write()...

		((DemoImpl)ob3).write();
		//--==>>ADemo 인터페이스 메소드 write()...
		//위에서 ADemo타입으로 바꼈습니다!
		//다운캐스팅
		//-- DemoImpl 클래스가 두 인터페이스를 모두
		//   구현했기 때문에 가능하다.

		// 만약 DemoImpl 클래스가 이들 중 한 인터페이스만 구현했다면
		// 이 구문은 런타임 에러 발생하는 구문이 된다.

Test121.java
- 클래스 고급
- 인터페이스(Interface)
// 인터페이스를 구현하는 추상 클래스 → 인터페이스에 추상메소드 2개중 하나만 구현.
abstract class DemoImpl implements Demo

// 추상 클래스를 상속받는 추상 클래스
//abstract class DemoImplSub extends DemoImpl
//				↓
//추상 클래스를 상속받는 클래스 → 남은 추상 메소드 1개도 구현해서 앞에 추상뗌.
class DemoImplSub extends DemoImpl

Test122.java
- 클래스 고급
- 인터페이스 (Interface)
/*
○ 『extends』 vs 『implements』
    
	클래스 extends 클래스
	클래스 extends 추상클래스

	인터페이스 extends 인터페이스
	인터페이스 extends 인터페이스, 인터페이스
	→ 인터페이스는 인터페이스를 상속한다!

	추상클래스 implements 인터페이스
	추상클래스 implements 인터페이스, 인터페이스
	→ 추상클래스에서 인터페이스를 재정의해도
	   클래스로써의 제기능을 못하겠구나
	   본인의 추상 메소드가 있으니!

	클래스 implements 인터페이스
	클래스 implements 인터페이스, 인터페이스


※ 인터페이스는 클래스와는 달리 다중 상속이 가능하며,
   인터페이스 자체도 상속된다.

※ 인터페이스의 멤버 변수인 데이터는
   접근제어지시자를 명시하지 않아도 기본 상수(primitive constant)인
   static final의 변경자로 설정된다.
   클래스에서 인터페이스를 추가하여 사용할 경우
   인터페이스 안에서 정의된 모든 메소드를 구현해 주어야 하며
   인터페이스를 구현하는 클래스는
   인터페이스의 상위 인터페이스가 제공하는 추상 메소드를 포함한
   모든 메소드를 구현하지 않을 경우
   추상(abstract) 클래스로 선언해야 한다.

※ 형식
   - 인터페이스는 메소드를 선언만 하고 정의는 없다.
   - 인터페이스를 implementes 할 경우 반드시 하위 클래스는
     인터페이스의 모든 메소드를 오버라이딩(Overriding)해야 한다.
   - 인터페이스는 자동적으로 다음과 같이 처리된다.
      #멤버 변수 : public static final
	  #메소드    : public abstract
   -  다중 상속은 콤마 (『,』 ) 로 구분되며
      여러 개의 인터페이스를 상속할 수 있다.
   -  인터페이스끼리 상속할 경우는 『extends』 키워드를 사용한다.

※ 인터페이스의 선언
   인터페이스는 클래스의 내부 구현을 제외한 참조형만 선언한 것으로
   메소드를 선언만 하고 정의는 할 수 없다.
   또한 클래스에서의 변수는 값이 변할 수 있지만
   인터페이스에서의 변수는 상수처럼 값이 바뀔 수 없기 때문에
   선언 시에 미리 값을 할당해 놓아야 한다.

※ 인터페이스의 구현
   인터페이스는 클래스를 위한 템플릿이기 때문에
   사용 가능한 인터페이스가 되기 위해서는
   자바 프로그램에서 인터페이스를 구현해 주어야 하는데
   이러한 기능을 하는 것이 『implements』예약어이다.

※ 클래스는 동시에 두 개 이상의 인터페이스를
   『implements』할 수 있다~!!!
*/

// 두 인터페이스(ADemo, BDemo)를 상속받은 인터페이스
interface CDemo extends ADemo, BDemo
{
	/*
	재정의 불가. 정의자체가 불가 : 인터페이스이니까
	public void write();
	public void print();
	*/
	public void test();
}

Test123.java
- 클래스 고급
- 인터페이스(Interface)
// ○ 실습 문제
// 성적 처리 프로그램을 구현한다.
// 단, 인터페이스를 활용할 수 있도록 한다.

// 실행 예)
// 인원 수 입력(1~10) : 2
// 1번째 학생의 학번 이름 입력(공백 구분) : 2280946 홍은혜
// 국어 영어 수학 점수 입력   (공백 구분) : 90 100 85
// 2번째 학생의 학번 이름 입력(공백 구분) : 2250847 최문정
// 국어 영어 수학 점수 입력   (공백 구분) : 85 70 65

//2280946 홍은혜	90 100 85  총점수   평균
//                  수  수 우
//2250847 최문정    85  70 65  총점수   평균
//                  우  미 양
//
// 계속하려면 아무 키나 누르세요....

여기서 포인트!
① IOException은 상속 불가. 
   부모의 예외보다 자식의 예외가 많을 수는 없다.
   따라서 부모 메소드 뒤에도 IOException, 
   자식 뒤에도 IOException을 붙힘.

② 메소드(int 매개변수);
   여기서 매개변수는 이미 선언한 것이라
   따로 선언한 변수에 담지 안해도됨.
//int s = score; //--이딴거 안해도 됨.

③ 등급 판정은 switch 문을 활용해도 되는데
   이때 /10을 해서 몫만 나오게 해야 범위로 줄수가 있다(90~99점)등.