Test124.java
-중첩 클래스
-실무에서 적극적으로 쓰이진않아요
○ 중첩 클래스
   
   중첩 클래스란 클래스 안에 다른 클래스가 설계되어 있는 형태로
   클래스 내부에서만 사용할 보조 클래스가 필요한 경우
   클래스를 중첩하여 프로그램의 구조를 보다 더 간단하고 알아보기 쉽도록
   만들 수 있는데 이러한 클래스를 중첩 클래스라 한다.
   이는 특정 클래스를 자신의 클래스 내부적인 용도로만
   사용할 목적으로 쓰이는데
   특정 클래스를 마치 자신의 멤버 변수나 메소드처럼 사용할 수 있게 한다.

○ 중첩 클래스의 종류(4가지)
   
   1. static 중첩 클래스(중첩 내부 클래스)
      클래스 내부에... 『public static class 클래스명』

	  중첩 클래스를 감싸는 외부 클래스 {} 안에 
	  static 을 붙인 새로운 클래스를 설계하는 것으로
	  모든 접근제어지시자를 사용할 수 있다.
	  static 중첩 클래스가 포함하고 있는 메소드에서는
	  외부 클래스의 인스턴스 변수나 인스턴스 메소드에는 접근할 수 없고,
	  (외부 클래스의 객체를 생성하지 않은 상태)
	  클래스 변수와 클래스 메소드만 접근할 수 있다.

	  - 프로그램의 구조를 보다 더 간단하고 알아보기 쉽게 구성할 수 있다.
	  - static으로 선언된 내부 클래스 이다.
	  - 중첩 클래스의 객체는 중첩 클래스를 포함하고 있는
	    외부 클래스의 객체와 동등하다.
	  - 외부 클래스의 클래스 변수와 클래스 메소드는
	    바로 접근하여 사용하는 것이 가능하다.
	  - 중첩 클래스와 중첩 클래스를 포함하고 있는 외부 클래스의
	    인스턴스 변수와 인스턴스 메소드는
		객체를 생성하여 서로 접근하는 것이 가능하다.
      - 중첩 클래스를 외부에서 단독으로 사용하는 것이 가능하다.

   2. 내부 클래스(inner class)
      클래스 내부에... 『public class 클래스명』

	  - static 중첩 클래스와 마찬가지로 프로그램 구조를 보다 더 간단하고
	    알아보기 쉽도록 한다.
	  - 외부 클래스의 메소드에서 내부 멤버 클래스를 사용하기 위해서는
	    반드시 내부 멤버 클래스 객체를 생성해 주어야 한다.
	  - 외부 클래스의 멤버 변수와 메소드를
	    객체 생성 없이 바로 사용하는 것이 가능하다.
	  - 내부 멤버 클래스는 외부에서 단독으로 객체를 생성하여
	    사용할 수 없다.
	    즉, 내부 멤버 클래스는 외부 클래스의 인스턴스 생성이
		선행되어야 한다는 것이다.
	  - static 으로 선언된 변수 또는 메소드를 가질 수 없다.

   3. 지역 클래스(로컬 클래스 ,local class)
      메소드 내부에...『public class 클래스명』
	                or 『public static class 클래스명』

	  - 클래스의 메소드 안에서 클래스를 정의하는 것으로
	    내부 멤버 클래스와 유사한 성격을 가지고 있긴 하지만
		접근제어지시자는 붙일 수 없다.

   4. 무명 클래스(익명 클래스, annoymous class)★ 얜 쓰임.
      이름 없는 클래스

	  - 클래스 또는 인터페이스에 대한 객체를 생성하면서
	    바로 클래스 또는 인터페이스를 정의하는 클래스.
	  - 정의하는 부분과 생성하는 부분이 하나로 묶여져
	    new 수식이 있는 곳에서 바로 클래스
		또는 인터페이스를 정의하는 것을 의미한다.

		new
		{
			...
		};

→ 중첩된 클래스는 바깥 클래스만!!!!!!!!쓴다.
   객체는 여기저기 다 쓰일라하는건데 얜 요상해.
   
   모바일의 이벤트.. 각각 독립적인 객체로 설정하면
   넘 많아서 리소스 소모가 너무 커요.

무명 클래스(익명 클래스, annoymous class)
      이름 없는 클래스
	  (이름을 붙힌다 → 호출하고 제어하고 ..
	    모바일 이벤트 처리에서 종종 사용!)

※ 중첩 내부 클래스는 외부에서 단독으로 객체를 생성한다. 
		   단, 위와 같은 방법으로 객체를 생성해서는 안되고
		   클래스 변수 접근이나 클래스 메소드를 호출하는 것과 같은 방식을 통해
		   접근하여 인스턴스를 생성할 수 있도록 처리해야 한다.
		*/
		Test.StaticNested ob2 = new Test.StaticNested();

Test125.java
- 클래스 고급
- 중첩 클래스 
- 지역 클래스(로컬 클래스, local class) outer 메소드 안에 클래스 정의
- outer 클래스에 inner class 생성자와 함수호출 구문이 들어가 있다.
//※ 변수 c 와 변수 d는 
		//   둘 다 지역변수 이지만...
		//   c 는 final 변수이기 때문에
		//   두 번째 write() 메소드에서 언제 접근하더라도
		//   고정된 값임을 보장받을 수 있다.
		//   반면에 d 는 그 값이 수시로 변동될 수 있는 상황이므로
		//   LocalTest 클래스의 인스턴스 생성 시점을
		//   언제가 될지 알 수 없기 때문에
		//   그렇다면 d에 어떤 값이 담겨있는지 보장받을 수 없기 때문에
		//   변수 d에 접근하는 것을 피할 수 있도록 문법적으로 처리. 

Test126.java
- 클래스 고급
- 중첩 클래스
- 이거는 outer메소드 안에 inner 구조 ㄴㄴ아님.
//※ 중첩 내부 클래스(static 중첩 클래스)와는 달리
		//   외부 클래스의 인스턴스(객체)를 사용하지 않고
		//   단독으로 내부 클래스의 인스턴스를 생성하는 것은 불가능하다.
		//	→ 외부 클래스의 객체를 사용하면
		//     내부 클래스의 객체를 생성하는 것이 가능하다.
		//     ob2임.

		//※ Test124.java 파일과 비교할 것~!!
		InnerOuterTest.InnerNested ob5 = ob2.new InnerNested();
		ob5.write();

//InnerNested ob3 = new InnerNested();
		//InnerOuterTest.InnerNested ob4 = new InnerOuterTest.InnerNested();
		
		// 둘다 컴파일 에러
		
차이점!
outer 클래스명. inner 클래스명 참조변수명 = new outer생성자().new inner생성자();


cf) static → 중첩 내부 클래스
outer 클래스명. inner 클래스명 참조변수명 = new outer클래스명.inner생성자();

Test127.java
- 클래스 고급
- 중첩 클래스 
- 무명 클래스(실무 가능 ㅇ)
○ Annonymous 클래스(익명의 클래스 : 무명 클래스)
  
   - awt 나 안드로이드 이벤트 처리에서 일반적으로 사용
   - 상위 클래스 메소드를 하나 정도 재정의할 필요성이 있을 때 사용
   - 클래스의 객체가 필요하면 또 다시 클래스를 생성해야 하는
     번거로움 때문에 익명의 클래스를 생성하여 처리한다.


○ 형식 및 구조
   
   new 상위클래스의 생성자()
   {
	   접근제어지시자 자료형 메소드()
	   {

		   ...;

		}
	
	}; //-- 세미콜론 check~!!
*/

※ 모든 객체의 조상은 object

Test3 ob1 = new Test3();

		System.out.println(ob1.toString()); // ob1에는 getString()밖에없져.
		//--==>>Test3@15db9742

		System.out.println(ob1.getString());
		//--==>>익명의 클래스...

		/*
		둘은 내부적으로는 toString을 쓴거지만
		toString()은 오버라이딩해서 쓴것.
		*/