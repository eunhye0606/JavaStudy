15정렬알고리즘
Test109.java
-정렬(Sort) 알고리즘
-선택 정렬(Selection Sort)
/*
○ 정렬
   : 데이터를 특정한 규칙(기준)에 맞게 순서대로 나열 (오름차순, 내림차순)

○ 정렬의 목적
   : 데이터 처리 과정의 편의성이나 가독성을 높이기 위함
     → 보기 좋게 ... 검색하기 위함

○ 정렬의 종류
   : 선택 정렬, 버블 정렬, 삽입 정렬, 힙 정렬, 퀵 정렬, 쉘 정렬 ....
     → 회사에서 order by 못쓰게 할 정도로 리소스 소모가 크다.

     
*/

// 선택 정렬(Selection Sort)
// 하나를 기준으로 비교해간다~1

// 실행 예)
// Source Data : 52 42 12 62 60
// Sorted Data : 12 42 52 60 62
// 계속하려면 아무 키나 누르세요...

int [] a = {52, 42, 12, 62, 60};
		/*
		42 52 12 62 60			0 vs 1
		== -- 
		12 52 42 62 60			0 vs 2
		==    --
		12 52 42 62 60			0 vs 3
		==       --
		12 52 42 62 60			0 vs 4
		==	    --
		------------------------1회전
		12 42 52 62 60			1 vs 2
		   == --
		12 42 52 62 60			1 vs 3
		   ==    --
		12 42 52 62 60			1 vs 4
		   ==       --
		------------------------2회전
		12 42 52 62 60			2 vs 3
		      == -- 
		12 42 52 62 60			2 vs 4
		      ==    --
		------------------------3회전
		12 42 52 60 62			3 vs 4
		         == --
		------------------------4회전

		*/
-향상된 for문(foreach 구문)
		// 자료구조를 탈탈 털겠다! a에 첨부터 순차적으로 접근하겠다.
		// int배열타입 ㄴㄴ 하나의 요소의 데이터 타입 = int타입
		/*
		for (요소 하나의 자료타입 변수명(아무거나)	:①자료구조)
		{
			a자료구조에 제일 첫번째 가져와서 n에 담아서 반복문 수행
			a끝까지 a.length만큼
			5번 돌아요... a의 방갯수만큼!
			a에서 끄집어낼게 없으면 반복문끝나요..

for (int n :a )
			System.out.print(n + " "); //a[0], a[i], a[2], ..., a[4]
		System.out.println();

// Selection Sort
		for (i=0;i<a.length ;i++ ) // 웅웅 ~~비교기준데이터 0 1 2 3 //// 52,~,60까지만
		{
			for (j=i;j<a.length ;j++ ) //쑝쑝~!!!! 비교대상데이터  1234 234 34 4
			{
				if (a[i] < a[j])			//if (a[i] > a[j]) //오름차순 정렬
				{
					//자리바꾸기
					a[i] = a[i]^a[j];
					a[j] = a[j]^a[i];
					a[i] = a[i]^a[j];
				}

			}
		}

Test110.java
-정렬(Sort) 알고리즘
-버블 정렬(거품 정렬, Bubble Sort)
int [] a = {52, 42, 12, 62, 60};

		/*
		42 52 12 62 60      01
		== --
		42 12 52 62 60      12
		   == --
		42 12 52 62 60      23
		      == --
		42 12 52 60 62      34
			 == --
		------------------------1회전 선택정렬이랑 다른 점 : 선택 정렬 맨 왼쪽이 fix,						기준을 0~3까지
															 버블 정렬 맨 오른족이 fix
		12 42 52 60 62 //-- 다시 첨부터          01
		== --
		12 42 52 60 62                           12
		   == --
		12 42 52 60 62 //-- 60 vs 62는 1회전때 끝남.      23
		      == --
	    ------------------------2회전																		기준을 0~2까지
		12 42 52 60 62        01
		== --
		12 42 52 60 62        12
		   == --
		------------------------3회전																		기준을 0~1까지
		12 42 52 60 62 
		== --
		------------------------4회전																		기준을 0까지	
		*/

Test111.java
-정렬(Sort) 알고리즘
-향상된 버블 정렬(Bubble Sort)


// ※ 앞에서 본 Selection Sort(Test109) 이나 Bubble Sort(Test110)의 성능은 같다.
//    성능은 소스코드로 평가되지 않음.
//    반복의 횟수로 평가
//    (→ 반복의 횟수로 추정)
//    반복의 횟수가 같음. 1회전 ~ 4회전

//    하지만, 향상된 Bubble Sort는 대상 데이터의 구조에 따라서
//    일반 Bubble Sort 나 Selection Sort 보다 성능이 좋을 수 있다.

// 원본 데이터 : 61 15 20 22 30
//				 15 20 22 30 61	- 1회전(스왑 발생 → true → 다음 회전 진행 O)	
//				 15 20 22 30 61	- 2회전(스왑 발생 → false → 다음 회전 진행 X)
//               → 반복문 덜 하겠지? ㅇㅋ

//==> 1회전 수행 ... 2회전 수행 ... 을 해보았더니 ...
//    2회전에서 스왑(자리바꿈)이 전혀 일어나지 않았기 때문에
//    불필요한 추가 연산(더 이상의 회전)은 무의미한 것으로 판단하여
//    수행하지 않는다.


// 실행 예)
// Source Data : 10 50 20 30 40
// Sorted Date : 10 20 30 40 50
int [] a = {10, 50, 20, 30, 40};
		/*
		10, 50, 20, 30, 40
		== --
		10, 20, 50, 30, 40
		    ==  --
		10, 20, 30, 50, 40
		        ==  --
		10, 20, 30, 40, 50
		            ==  --
	    ------------------------1회전 → 스왑 발생
		10, 20, 30, 40, 50
		==  --
		10, 20, 30, 40, 50
		    ==  --
		10, 20, 30, 40, 50
			==  --
		------------------------2회전 → 스왑 발생하지 않음.

				X

				X
		
		------------------------3회전 → X
		
				X

		------------------------4회전 → X
		*/

향상된 버블정렬 → do while문으로 시작한다.
이유는? 반드시 1회전은 하기 때문이다. break를 안해도된다.


Test112.java	과제
-정렬(Sort) 알고리즘

// ○ 과제
//    사용자로부터 여러 학생의 성적 데이터를 입력받아
//    점수가 높은 학생부터 낮은순으로 등수를 부여하여
//    결과를 출력하는 프로그램을 구현한다.
//    단, 배열과 정렬 알고리즘을 활용하여 작성할 수 있도록 한다.


// 실행 예)
// 인원 수 입력 : 5
// 이름 점수 입력(1, 공백 구분) : 이아린 90
// 이름 점수 입력(2, 공백 구분) : 박현수 80
// 이름 점수 입력(3, 공백 구분) : 이지연 85
// 이름 점수 입력(4, 공백 구분) : 서민지 75
// 이름 점수 입력(5, 공백 구분) : 김민성 95

/*
--------------
1등 김민성 95
2등 이아린 90
3등 이지연 85
4등 박현수 80
5등 서민지 75
--------------
계속하려면 아무 키나 누르세요...
*/