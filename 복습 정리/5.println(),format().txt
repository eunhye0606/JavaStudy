Test007.java
-print() / println() / printf() / format()
-printf(), format()은 JDK 1.5부터 지원되는 메소드
-두 개 사용법은 같다.
-format()은 String에서 자주 쓴다.
-System.out.printf("○ + ○ + ○", 10, 20, 30);
-System.out.format("○ + ○ + ○", 10, 20, 30);
-서식 출력용 메소드
-출력하기 위해 틀짜놓고 하는것.
-메소드 뒤에 ln이 없기에 print()메소드 처럼 개행이 안된다.
-그래서 \n 혹은 %n으로 개행출력.
-%d == 10진수 정수형 ( 1, 10, 94 .. )
-%f == 실수(3.14 ...)
-%.2f : 소수점 이하 두 번째 자리까지 표현
        반올림함.
-%d로 틀짜고 실수를 넣으면 런타임에러가 발생한다 (컴파일에러는 문법을 봄)
-문법은 맞는데 개발자가 정수를 목적으로 코드 짰는데
 사용자가 실수를 넣어서 런타임 에러 발생.

Test018.java
-printf() , format() 
-양수 강조법 : %+d
               %-d → 런타임에러 발생.
-음수 강조법 : -%d
- //System.out.printf("%d\n",'A');
		//처리가 아니라 표현이니까 아스키문자 - int 아니야
- 'A'는 char형이라 %c 해야함.
- 저렇게 쓰면 런타임 에러뜸!!
-%c 문자형, %s는 문자열형

//HEX 16진수로 바꿔서
//DEC 10진수
//OCT 8진수
//BIN 2진수
System.out.printf("%h\n", 365);
                    d
                    0
                    b
System.out.printf("%8.2f\n", 123.236);
		//  123.24
		//dot도 자리 하나
		// 앞에 두 자리
-    -    -    -    -    -    -    -
          1    2    3    .    2    4
		System.out.printf("%2.2f\n",123.236);
		//123.24 
		//쟤가 준 자리수가 우리자루에 비해 적으면
		//걍 무시깜

		System.out.printf("%3d\n",1231313);
		//1231313
		//int도 마찬가지