Test102.java
-static 변수(클래스변수)와 static 메소드(클래스메소드)

// ※ 실습 편의상 접근제어 지시자 생략
	// ※ 클래스 변수 또는 클래스 메소드는
	//    클래스 정보가 로딩되는 순간 메모리 할당이 이루어지며
	//    클래스 이름 또는 객체(인스턴스)를 통해 접근할 수 있다.
	//           → 둘 다 가능하다는 소리. 
	//              클래스의 이름으로 접근하는 것이 일반적!

	//    즉, 『new』 연산자를 통해 메모리를 할당 받지 않아도
	//    사용이 가능하다는 것이다.
static변수(클래스변수, class변수, 정적변수)
초기화블럭 여기에도 static가능 나중에배움.
초기화 → 생성자() (우선순위 Test080.java)

// ※ 인스턴스 변수 또는 인스턴스 메소드는
	//    동일한 클래스의 메소드에서는 바로 접근하는 것이 가능하지만
	//         → 둘다 인스턴스 메소드라면 객체생성안해도 가능

	//    클래스 메소드에서는 접근할 수 없다.
		→ 탄생시점이 다르다. 인스턴스 변수는 객체 생성시에 
                   만들어짐.

non - static변수(인스턴스변수, instance변수,동적변수)
non - static메소드(인스턴스메소드, instance메소드 , 동적메소드)
인스턴스가 클래스를 부른다 가능! → 동생이 형을 부른다 가능
클래스메소드가 인스턴스 변수를 부른다 불가능!!! → 동생안태어남.
static끼리도 탄생시점이 같아서 부를 수 있다.

// 클래스 변수에 접근하기 위해서는
『클래스명.변수명』의 형태로 클래스의 이름을 통해
접근하는 것이 가능하다.
-->> main() → 클래스 변수 a : 10
Test102에 대한 인스턴스 생성안해도 가능.
클래스 변수라!

클래스명을 직접쓴다!!! static!!!! 그래서 this를 썼던거임~!
// 같은 클래스 내부의 메소드이기 때문에
-->> main() → 클래스 변수 a : 10
같은 클래스 내에서 부르면 클래스명 생략가능!
같은 클래스 내부에 존재하기 때문에
클래스 이름을 생략하는 것이 가능하다.

★ 같은 클래스 내부에서
   클래스 메소드 호출 ( static 메소드 호출)
   클래스명 생략 가능!
클래스 메소드에서 클래스 메소드의 호출은 가능하며,(main()에서 print())
『클래스명.메소드명()』의 형태로 접근하여 호출하는 것이 가능하다.
또한, 지금은 같은 클래스 내부에 존재하기 때문에
클래스의 이름을 생략하는 것이 가능하다.

인스턴스 변수는 생성된 인스턴스를 통해서만 접근이 가능하다.
static main()이 탄생한 순간, 인스턴스 변수는 탄생안한다.
클래스가 로딩되는 순간임!!!!!!!!!!!!!
→ 인스턴스변수든 메소드든 객체가 생성되어야 탄생한다
   main에서 인스턴스 변수, 메소드 호출 불가능
   형이 동생 부르기 불가능 동생 태어난지 몰라

 ※ 클래스 변수나 클래스 메소드는
    『생성된인스턴스명.변수명』 『생성된인스턴스명.메소드명()』 가능
    『클래스명.변수명』  『클래스명.메소드명()』 일반적임 가능

인스턴스 변수는 객체마다 다름.
클래스 변수는 한번 초기화 하면 다 같음!

클래스하면 "공유"와 "탄생시점"
스테이플러(공유) 딱풀(객체전용변수)