자바 기본 프로그래밍
Test001.java
-클래스 첫 이름은 대문자로 시작.
-mian()함수는 자바 인터프리터가 처음 찾는 함수
-메소드() : 호출하다.
-자바에서 함수(메소드)는 독립적으로 존재할 수 없다.
-→ 클래스에 정의되는 형태로 함수를 만든다.
-그래서 다른 학문(수학 등)에서 말하는 함수와 차이가 있다.
-→ 그래서 자바에서의 함수는 메소드라고 부른다.
-함수,메소드 → 기능,동작,행위
-메소드는 정의되어야 호출(println())으로 호출할 수 있다.

Test002.java
-컴파일 실행 실습

자바의 개요 및 특징
Test003.java
-println()메소드는 마지막에 라인 스킵(개행)을 한다.
-print()는 하지않는다.

자바 기본 프로그래밍
Test004.java
-변수와 자료형
-자료형 변수명; //-- 변수 선언
-변수명 = 값; //-- 초기화
-자료형 변수명 = 값 //-- 변수 선언 및 초기화 한번에
-자바에서는 '='대입연산자가 나오면 오른쪽 부터 처리를 해라!
-컴파일 에러 : javac.exe가 찾는다.
-런타임 에러 : 개발자의 의도와 다른 형태로 사용자가 사용할 때 나는 에러.
-알파테스트(개발자), 베타테스트(개발자가 아닌사람들의 테스트)
-클로즈테스트(특정 사용자가 대상), 오픈테스트(아무나),
-덧셈 연산자(+)는 피연산자 중 어느 하나라도 문자열 형태이면 ""
 산술연산자로써의 기능을 하지 않는다. 문자열 결합 연산자로 기능한다
 →처리 결과는 문자열 형태로 반환한다.
 뺄셈 연산자는 그런 기능이 없다!

Test005.java
-변수와 자료형
-변수 선언 → 메모리 공간 확보 / 할당
 자바야 자바야 나 int형 4byte로 변수 선언할거니까 자리예약좀 !!
- 연산 및 처리 → 확보한 메모리 공간에 데이터 담아내기
- '=' 대입 연산도 연산이다! 대입 연산자!!
-자동형변환, 명시적형변환

Test006.java
-변수와 자료형
-키워드 및 식별자
-스코프 영역 안에서 변수명은 식별자이다!!
 식별자 : 구분하기 위한
-문법적으로 변수명을 한글로는 가능하지만 실무에서 사용하지는 않는다!

Test007.java
-print() / println() / printf() / format()
-printf(), format()은 JDK 1.5부터 지원되는 메소드
-두 개 사용법은 같다.
-format()은 String에서 자주 쓴다.
-System.out.printf("○ + ○ + ○", 10, 20, 30);
-System.out.format("○ + ○ + ○", 10, 20, 30);
-서식 출력용 메소드
-출력하기 위해 틀짜놓고 하는것.
-메소드 뒤에 ln이 없기에 print()메소드 처럼 개행이 안된다.
-그래서 \n 혹은 %n으로 개행출력.
-%d == 10진수 정수형 ( 1, 10, 94 .. )
-%f == 실수(3.14 ...)
-%.2f : 소수점 이하 두 번째 자리까지 표현
        반올림함.
-%d로 틀짜고 실수를 넣으면 런타임에러가 발생한다 (컴파일에러는 문법을 봄)
-문법은 맞는데 개발자가 정수를 목적으로 코드 짰는데
 사용자가 실수를 넣어서 런타임 에러 발생.

Test008.java
-형 변환
-접미사활용
 1바이트 2바이트 4바이트  8바이트   4바이트(실수)  8바이트(실수)
-byte   < short   < int    < long   < float       < double
          char  
         2바이트
-boolean
  1바이트

//자료형의 종류와 구분
자료형		데이터		메모리 크기		표현 가능 범위
boolean		참과 거짓	1바이트			T,F

char		문자		2바이트			모든 유니코드 문자

byte		정수		1바이트			-128~ 127
short		정수		2바이트			-32768~ 32767
int		정수		4바이트			+- 21억
long		정수		8바이트			매우 큰 정수


float		실수		4바이트			매우 큰 실수
double		실수		8바이트			더 큰 실수




//자료형 변환

byte → short  ↘ 
		  int →long →float →double
        char   ↗

-자동형변환 : 큰거에 작은거는 자동으로 담긴다 (short가 long에 담긴다)
-명시적형변환(강제형변환), 자동형변환 위배가 아니더라도 
 어디서 형변환 된지 알려줄라고 쓸 때도 있삼!
int a;
char c;
a = c; → int형(4바이트 정수)에 char(2바이트 문자형) → 담긴다 → 자동형변환
c = a; → char(2바이트 문자형)에 int(4바이트 정수형) → 담기지 않음 → 자동형변환 위배
          작은그릇에 큰거 담을 수 없음
          c = (char)a; 
          a의 크기가 2바이트에 담길 크기면 명시적형변환으로 가능
long d = 10000000000;	//백억임
'=' 대입 연산자를 기준으로 우측의 상수 표현이
    int형 메모리에 해당 상수를 할당할 수 없다. 그래서 long으로 자료형 선언
    21억을 넘는다. 그래서 접미사 L을 뒤에 붙혀야 한다...

long d = 10000000000L; O
long d = 10000000000; X
int d = 10000000000; X
int d = 10000000000L; X

int e = 030;
System.out.println("e의 결과:" + e);
		//-->e의 결과:24
접두어 0 → 8진수로 바꿔줌.
030 →64, 8, 1 
8 x 3 = 24이기 때문에 24가됨.

Test009.java
-변수와 자료형 실습 및 테스트 : boolenan

Test010.java
-변수와 자료형 실습 및 테스트 : char
- '' 는 문자형 "" 은 문자열형
- char ch2 = '\n' → \n도 하나의 문자입니다~!

Test011.java
//나눗셈 연산 실습
- 정수와 정수의 나눈셈 ( 몫 반환 ) 
- 피 연산자로 실수가 포함되어 있는 나눗셈
  실수 기반의 연산 수행.
Like 덧셈 연산자는 피연산자가 문자열or 문자가 있으면 문자열 결합 연산자로 수행.



Test012.java
-원의 넓이와 둘레를 구하는 프로그램 구현
- final → 변수의 상수화하는 키워드
- 변수는 수시로 변할 수 있다.
  상수는 변하지 않는다 이름 없는 특징
- final 변수는 대문자로 쓰는 암묵적 룰!
- 언더바스코어 표기법 

Test013.java
-직사각형의 넓이와 둘레를 구하는 프로그램 구현

Test014.java
-자바의 기본 입출력 : BufferedReader 클래스
-버퍼 : 임시기억공간, Like 키보드같은 장치
-throws IOException : 오류나면 그 오류 메소드 밖으로 던질게 자바

BufferedReader br = new BufferedReader(new InputStreamReaer(System.in)); 
                                                           -----------
                                                           바이트 입력값
                                       ---------------------------------
                                       바이트 → 문자 번역기
---------------------------------------
        문자 입력을 읽어들이는 장치
br.readLine(); → BufferedReader의 readLine() → 문자열 반환!
Integer.parseInt() → 매개변수로 넘겨받은 문자열 데이터 → 정수형으로 변환
단, 이 때 넘겨받은 문자열 데이터는 숫자모양이여야 한다. (NuberFormat)

      
Test015.java
-삼각형의 밑변의 길이와 높이를 사용자로부터 입력받아
 삼각형의 넓이를 구하는 프로그램 구현

area = (double)length * height /2; //하나만 실수로 바꿔.
	//area = (double)length * height /2.0; //이게 깐지
-실수 기반의 연산을 수행해야해서 
 나눗셈 연산 : 피연산자 중 하나라도 실수면 실수기반 연산 수행!

Test016.java
-사용자로부터 이름, 국어점수, 영어점수, 수학점수를 입력받아
- 이름과 총점을 출력하는 프로그램을 구현한다.

Test017.java
- 자바의 기본 입출력 : System.int.read()
  BufferedReader의 readLine()과 비교!

System.in.read() 메소드는 한 문자만 가져온다.
readLine() 처럼 문자열대기열에 있는거 가져오는 건 같음.
단 , 입력받은 하나의 문자를 문자 그대로 가져오는 것이 아니라
ASCII Code 값으로 반환한다.
즉, 'A'를 입력하면 65로 가져온다! int형으로 변환해서 가져옴!!

-System.in.skip(매개변수);
 매개변수만큼 안읽고 건너 뛴다.
 엔터 == \r + \n

Test018.java
-printf() , format() 
-양수 강조법 : %+d
               %-d → 런타임에러 발생.
-음수 강조법 : -%d
- //System.out.printf("%d\n",'A');
		//처리가 아니라 표현이니까 아스키문자 - int 아니야
- 'A'는 char형이라 %c 해야함.
- 저렇게 쓰면 런타임 에러뜸!!
-%c 문자형, %s는 문자열형

//HEX 16진수로 바꿔서
//DEC 10진수
//OCT 8진수
//BIN 2진수
System.out.printf("%h\n", 365);
                    d
                    0
                    b
System.out.printf("%8.2f\n", 123.236);
		//  123.24
		//dot도 자리 하나
		// 앞에 두 자리
-    -    -    -    -    -    -    -
          1    2    3    .    2    4
		System.out.printf("%2.2f\n",123.236);
		//123.24 
		//쟤가 준 자리수가 우리자루에 비해 적으면
		//걍 무시깜

		System.out.printf("%3d\n",1231313);
		//1231313
		//int도 마찬가지

Test019.java
-자바의 기본 입출력 : java.util.Scaaner
※ java.util.Scanner
	 단락 문자 패턴을 사용하여 입력을 토큰에 따라 분할하며
   디폴트(default)로 사용되는 단락문자는 공백이다.
   작성된 다음 토큰은 『next()』 메소드를 사용
   다른 형태(자료형)의 값으로 변환할 수 있다.
- Scanner는 BufferedReader의 통역기(InputStreaReader)가 없어도 됨!
- IOException 없어도 됩니다. 인증받은 새끼임.

-sc.next()는 br.readLine()과 같은놈.
단, Integer.parseInt같은거 하지마.
    nextInt()가 있지롱
    별도의 형변환과정이 필요없습니다.

Test020.java
-import 안하고
- 매번 java.util.Scanner sc = new java.util.Scanner(System.in);
  가능하긴한데 할거임? 개귀찮음.

-scanner 공백 구분이 defalt임.
- 스페이스 무한해도 공백 한개로 인지
- 엔터도 공백으로 인지
- 입력값이 부족하면 당연히 안넘어가고 
- 많으면 뒤로 무시함.

Test021.java
// System.out.println("\"); -->컴파일에러
   애초에 저게 안됨. 뒤에 닫는 " 이거 써도 앵 \다음머임??
   하면서 계~속 문자열로 생각.
// 왜냐면 자바는 \이거 보고 아 ~ \s ? \d? 이러고 있음.
// 그래서 \이거 문자로 쓰고 싶으면 \\두개~
sc = new Scanner(sc.next()).useDelimiter("\\s*,\\s*");
이제 배우니까 알겠다.
sc를 초기화함. sc덮어쓰기함. 
sc = new Scanner(sc.next()).useDelimiter("\\s*,\\s*");
                            -------------
                             사용 구분자
                                         ------------
                                         모든문자열,모든문자열

→ 즉, 문자열을 콤마로 구분할게!

Test022.java
-실수형 데이터타입의 정밀도 테스트 실습
float보다 double이 정밀도가 높다. 십만번 반복했을때 값이 미세하게 다름으로 증명
→ 고로 실수는 double써라~

Test023.java
-산술 연산자
- 사용자로부터 임의의 정수를 두 번입력받아(한자리 아니여도됨)
- 사칙연산 및 나머지 연산을 수행하여 
- 그 결과를 출력하는 프로그램을 구현.
  
  문자열안에서 %를 표현하려면 "%%" 두번 쓰면 된다~!

Test024.java
- 비트 단위 연산자
  초급 개발자와 고급개발자의 차이는 비트연산자이다~
- 비트낫 == 1의 보수, 비트열반전
- 음수는 바로 2진수 계산 할 수 없다.
- 그래서 더해서 0이 되는 10진수 → 2진수로 바꾼 뒤 
   → 1의 보수를 취한뒤 + 1 을 한 값이 음수의 2진수이다.

Test025.java
- 비트and, 비트or,         비트xor
  둘다 t   둘중하나라도 t  둘이 다르면 t

Test026.java
// 비트 단위 연산자 『xor』 연산자를 활용하여
// 두 변수에 담겨잇는 내용(값) 바꾸기
x = x^y;
y = y^x;
x = x^y;

Test027.java
- shift !!! 존나 어려움.
<< 3: ← 이쪽으로 3움직여라. 뒤에는 0으로 채움
>>>3: → 이쪽으로 3움직여라. 앞에는 0으로 채움
>> 3: → 이쪽으로 3움직여라. 단, 앞에는 1로 채움 :  이거 부호변하는거방지!

Test028.java
- 논리연산자
논리and, 논리or, ! →  둘다 참, 둘 중하나 참!, 논리부정
cf ) ~ : 이건 비트부정~ 비트낫~ 1의보수 ~ 비트열반전~

Test029.java
-삼항 연산자 == 조건 연산자
 피연산자 연산자 피연산자 연산자 피연산자
 -------         --------        --------
   1항              2항             3항

  피연산자 ? 피연산자 : 피연산자
  -------    --------   --------
    1항        2항         3항

 1항의 연산 결과 → true  → 2항 수행
 		 → false → 3항 수행

Test030.java
- 사용자로부터 임의의 정수를 입력받아
  입력받은 정수가 양수인지, 음수인지, 0인지 구분하는
  프로그램 구현

Test031.java
-실행 흐름의 컨트롤(제어문)
-if ~ else
//사용자로부터 임의의 문자를 하나 입력받아
//대문자이면 소문자로 소문자이면 대문자로
//알파벳이 아닌 기타문자이면 입력오류 처리하는 프로그램을 구현

-boolean은 자동형변환 대상이 아닙니다. 
 그래서 명시적형변환도 안됩니다!

Test032.java
-사용자로부터 임의의 연도를 입력받아
 윤년인지 평년인지 판별하여
 결과를 출력하는 프로그램을 구현하라.

- 윤년 조건
  4의 배수이고 100의 배수가 아니다
  혹은 400의 배수이면 윤년이다.

Test033.java
//1. 프로그램을 작성할 때 주어진 조건에 따라
//   분기 방향을 정하기 위해 사용하는 제어문에는
//   if문, if~else문, 조건연산자, 복합if문(if문 중첩),
//   switch 문이 있다.

//2. if문은 if 다음의 조건이 참일 경우,
//   특정 문장을 수행하고자 할 때 사용되는 구문이다.

Test034.java
-if ~ else 실습

Test035.java
-if ~ else 실습, 홀수,짝수,0
-else에서 result를 출력할 때, 초기화를 하지않으면
 자바는 영짝홀 아닐 때, result가 뭔데~ 해서 컴파일에러발생!
// ※ if ~ else 구문의 중첩 구문은
//	  반드시 else로 끝나야 하는 것이 아니다.
//	  다만, 출력해야 할 구문을 처리하는 과정에서
//	  문제가 발생하지 않는 구문으로 작성해야 한다.


// ※ 조건문 구성 과정에서 이외의 영역(else)을
//    업무에 포함된 내용으로 처리하는 것은 바람직하지 않을 경우가 있다.
//    불가능한 경우는 어쩔 수 없더라도
//    가급적이면 업무에 포함되지 않는 내용을
//    이외의 영역(else)에서 처리할 수 있도록 하자.
// ex)주민번호, 010 등

Test036.java
-if ~ else 실습
// 사용자로부터 임의의 정수를 입력받아
// 다음과 같은 판별 결과를 출력하는 프로그램을 구현한다.

// 2의 배수 / 3의 배수 / 2와 3의 배수 / 2와 3의 배수 아님

Test037.java	과제
-if ~ else 실습
//사용자로부터 임의의 연도를 입력받아
//입력받은 연도가... 윤년인지 평년인지 판별하여
//그 결과를 출력하는 프로그램을 구현한다.
//단, 입력은 BufferedReader의 readLine()을 활용하고
//if 조건문을 활용하여 연산을 수행할 수 있도록 한다.

Test038.java
//사용자로부터 임의의 두 정수와 연산자를 입력받아
// 해당 연산자의 연산 처리 결과를 출력하는 프로그램을 구현해라.
// 단, if 조건문을 활용하여 처리할 수 있도록 하며,
// 연산 결과는 편의상 정수 기반으로 처리될 수 있도록 한다.

// 실행 예 )
// 첫 번째 정수 입력 : 
// 두 번째 정수 입력 : 
// 연산자 입력 [+ - * /] :

Test039.java
// 사용자로부터 임의의 정수 세개를 입력받아
// 작은 수에서 큰 수 순으로 출력하는 프로그램을 구현한다.

// 실행 예)
// 첫 번째 정수 입력 : 7
// 두 번째 정수 입력 : 70
// 세 번째 정수 입력 : 42

// >> 정렬 결과 : 7 42 70
// 계속하려면 아무 키나 누르세요 .....
// (1) 첫 번째 vs 두 번째
//		→ 첫 번째 정수 > 두 번째 정수보다 클 경우 자리 바꿈.
// (2) 첫 번째 vs 세 번째
//		→ 첫 번째 정수 > 세 번째 정수보다 클 경우 자리 바꿈
// (3) 두 번째 vs 세 번째
//		→ 두 번째 정수 > 세 번째 정수보다 클 경우 자리 바꿈.

- 나중에 쓴건데 max라는 변수에 담아서 실행하는 법도 있다.

Test040.java
// 사용자로부터 임의의 정수 5개를 입력받아
// 짝수별, 홀수별 합계를 출력하는 프로그램을 구현한다.
// 단, Scanner를 활용하여 데이터를 입력받을 수 있도록 한다.

// 실행 예 )
// 임의의 정수 5개 입력 : 1 2 3 4 5

// >> 짝수의 합은 6이고, 홀수의 합은 9 입니다.
// 계속하려면 아무 키나....

-누적합은 초기화 0부터
-누적곱은 초기화 1부터!

Test041.java	과제
-if ~ else 실습
//if ~else 

//  사용자로부터 임의의 알파벳 한 문자를 입력받아
//  이를 판별하여 입력받은 알파벳이 모음일 경우만
//  결과를 출력하는 프로그램을 구현한다.
//  단, 대소문자를 모두 적용할 수 있도록 처리한다.
//  또한, 알파벳 이외의 문자가 입력되었을 경우
// 입력 오류에 대한 내용을 사용자에게 안내해 줄 수 있도록 한다.

// 실행 예 )
// 임의의 알파벳 한 문자 입력 : A
// >> 모음 OK ~!!!
// 계속하려면 아무 키나...

// 임의의 알파벳 한 문자 입력 : e
// >> 모음 OK ~!!!
// 계속하려면 아무 키나...

// 임의의 알파벳 한 문자 입력 : B
// 계속하려면 아무 키나...

// 임의의 알파벳 한 문자 입력 : 1
// >> 입력 오류 ~!!!
// 계속하려면 아무 키나...

Test042.java	과제
//사용자로부터 임의의 문자를 하나 입력받아
//대문자이면 소문자로 소문자이면 대문자로
//알파벳이 아닌 기타문자이면 입력오류 처리하는 프로그램을 구현한다.


// 실행 예)
// 한 문자 입력 : A
// A → a
//계속하려면 아무 키나 누르세요....


// 한 문자 입력 : b
// b → B
//계속하려면 아무 키나 누르세요....

// 한 문자 입력 : 7
// >> 입력 오류 ~!!!
//계속하려면 아무 키나 누르세요....

Test043.java
-switch 실습
// switch 문 실습

/*
○ 다중 선택문이라 하며. switch 문 다음의 수식 값에
   따라 실행 순서를 여러 방향으로 분기할 때 사용하는
   문장이다.

○ 형식 및 구조
   switch(수식)
   {
	   case 상수1 : 문장1; [break;]		break 멈추고 (빠져나간다.)
	   									continue (뒷부분 무시하고) 계속해라
	   case 상수2 : 문장2; [break;]
	       :              :
	   [default : 문장n+1; [break;]]		//[]는 생략가능!
	}										//if문에 else랑 비슷
											//반드시 디폴트 ㄴㄴ
											//처리영역에서는 가능
											// 출력에서 에러날수는 있음.

	switch 문의 『수식』과 case의 『상수』는
	byte, short, int, long 형이어야 한다.
	//정수형태의 프리미티브형식만

	case 문 뒤에 『break;』가 없는 형태인 경우
	다음 case 문의 문장을 계속해서(이어서) 수행하게 된다. → (기본모델)
	『break;』가 존재할 경우
	해당 지점에서 수행을 멈춘 후 switch 문을 빠져나간다. → (일반모델)

Test044.java
-switch 실습
// 사용자로부터 1부터 3까지의 정수 중 하나를 입력받아
// 입력받은 정수만큼의 별문자(★)가 출력되는 프로그램을 작성한다.
// 단, 두 가지 방법으로 구현할 수 있도록 한다.

//① switch 문의 일반 모델을 사용한다.
//② switch 문의 기본 모델을 사용하되,
//   『break』를 딱 한 번만 사용할 수 있도록 구성한다.

// 실행 예)
// 임의의 정수 입력(1~3) : 3
// ★★★
// 계속하려면 아무 키나...

// 임의의 정수 입력(1~3) : 1
// ★ 
// 계속하려면 아무 키나...

// 임의의 정수 입력(1~3) : 7
// 입력 오류 ~ !!
// 계속하려면 아무 키나...

-누적을 이용하자!

Test045.java
// 사용자로부터 임의의 두 정수와 연산자를 입력받아
// 해당 연산자의 처리 결과를 출력하는 프로그램을 구현하라.
// 단, switch 문을 활용하여 처리할 수 있도록 하며
// 연산 결과는 편의상 정수 형태로 처리할 수 있도록 한다.

// 실행 예)
// 첫 번째 정수 입력 : 3
// 두 번째 정수 입력 : 17
// 연산자 입력 [+ - * /] : -

// >> 3 - 17 = -14
// 계속 ..............

Test046.java
- 반복문 실습
○ 반복문의 개요
	
	주어진 조건이 『참』인 경우
	일정한 영역의 문장을 반복 수행하다가
	조건식이 거짓이 되는 순간이 오면,
	반복 수행을 중단하는 문장이다.
	이러한 반복문에는 『while』, 『do ~ while』,『for』문 등이 있으며
	반복문의 제어를 위해 『break』,『continue』문을
	사용하는 경우가 있다.

○ while 문

	조건식을 먼저 비교하여
	조건식의 처리 결과가 참인 경우, 특정 영역을 반복 수행하는 문장으로
	반복 횟수가 정해져 있지 않은 경우나
	반복 횟수가 많은 경우 주로 사용한다.
	while 문은 조건이 맞지 않은 경우
	반복은 커녕 단 한 번도 실행되지 않을 수 있다.

○ while 문의 형식 및 구조

	while(조건식)
	{
		실행문;
	}
☆ 문제 1부터 100까지의 합을 계산하여
   결과 출력하는 프로그램을 구현한다.
   단 , while 반복문을 사용한다.

   실행 예 )
   1부터 100까지의 합: 5050
   계속하려면 아무 키나.......

※ 문제 인식 및 분석
	1. 출력 구문이 반복문의 영역 밖에 위치해야 한다.
	2. 1부터 1씩 증가할 변수와 누적합을 담을 변수
	   두 개의 변수가 필요하다.

Test047.java
-반복문(while)실습
//1부터 100까지의 정수 중에서 
//짝수들의 합을 계산하여 결과값을 출력하는 프로그램을 구현하라.
// 단, 조건문을 사용하지 않도록 하며,
// while 반복문을 활용하여 작성할 수 있도록 한다.

// 실행 예)
// 1부터 100까지의 정수 중 짝수의 합 : xxxx
// 계속 .........


//※ 문제 인식 및 분석
// 2+ 4+ 6+ 8 + ... + 100
//	- 초기값 : 2
//	- 증가값 : 2
//  - 한계값 : 100

Test048.java
-반복문(while)실습
//1부터 100까지의 정수 중에서
//짝수들의 합과 홀수들의 합을 따로 구분하여 계산한다.
// 단, 반복문은 while 문을 사용할 수 있도록 하며,
// 조건 구문은 if 조건문을 사용하여 작성할 수 있도록 한다.

// 실행 예 )
// 1부터 100까지의 정수 중
// 짝수의 합 : 2550
// 홀수의 합 : 2550
//계속 ............

Test049.java
-반복문(while)실습
//실행 예 )
// 1 부터 100 까지 정수의 합은 : 5050
// 1 부터 100 까지 짝수의 합은 : 2550
// 1 부터 100 까지 홀수의 합은 : 2500
//계속 ............

Test50.java
-반복문(while)실습
//1부터 100까지 정수의 합을 구하되,
//10의 배수가 될 때 마다... 결과를 출력하는 프로그램을 구현하라.

// 실행 예 )
// 1~10 까지의 합:
// 1~20 까지의 합:
// 1~30 까지의 합:
//	    :	
//1~100까지의 합 : 
//계속 .............







	