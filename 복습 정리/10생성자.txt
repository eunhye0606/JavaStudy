Test076.java
-생성자(Constructor)

○ 생성자(Constructor)의 역할
 
   1. 인스턴스 생성 → 메모리 할당
   2. 초기화

○ 생성자(Constructor)의 특징

   1. 생성자는 메소드이지만, 일반 메소드처럼 호출될 수 없으며,
   							_______________
							자주 호출 불가
      반환 자료형을 가질 수 없다.
	  (『void』 조차 가질 수 없으며, 값을 반환할 수도 없다.)
	  return 있으면 안된다.

	2. 생성자는 클래스와 동일한 이름을 가져야 한다.
	   (대소문자 명확히 구분)
	
	3. 생성자는 객체를 생성하는 과정에서 『new생성자();』의 형태로 호출한다.
	   (인스턴스 생성 시 단 한 번만 호출)
	   __________________________________
	   이러한 특징 때문에 final 변수 초기화가 가능하다.

/*				 // ★ 사용자 정의 생성자가 존재하지 않을 경우
	NumberTest() // -- 컴파일 과정에서 자동으로 삽입되는 『디폴트 생성자』
				 //    (default Constructor)
				 //    클래스 이름과 같은 메소드를 만들어 주고
				 //    텅 비어있는 상태, 매개변수 없는 메소드.
				 //    눈에 보이지는 않지만.

전역변수는 자바가 0으로 초기화 해줌.
별도로 생성자 만들었다면 디폴트 생성자가 만들어지지 않는다.

Test077.java
-생성자(Constructor)
-사용자 정의 생성자가 있으면 디폴트 생성자가 자동으로 생성되지 않는다.
-사용자 정의 생성자에 매개변수가 필요하면
 생성자 () ← 이거 안에 매개변수 넣어야 컴파일 에러가 안뜬다!

Test078.java
-생성자(Constructor)
- 클래스에서 선언된 변수 멤버 변수, 인스턴스 변수 (static변수, 클래스 변수랑 다름)
	// 동일한 스코프안에서 동일한 메소드는 정의 안돼
	// 메소드가 식별가능해야하기 때문에.!

	// ※ 생성자의 이름은 항상 예외없이 클래스의 이름과 동일해야 하며
	//    필요할 경우 인수를 받아들이는 것도 가능하고
	//    같은 이름의 메소드를 정의하는 중복정의가 가능하지만
		→ 생성자 오버로딩이 가능하다.
                   생성자는 클래스안에서 최소 한개!
		   한 클래스는 반드시 하나 이상의 생성자를 가진다.
	//    리턴값 (반환값)은 가질 수 없다.


	// ※ 생성자는 다른 일반 메소드처럼 호출될 수 없고,
	//	  『new』 연산자를 이용하여 객체를 생성하기 위해 호출되며,
	//     각 클래스의 인스턴스인 객체를 생성한 후에
	//     생성된 객체의 멤버를 초기화시키는 작업을 수행한다.
인스턴스 생성 구문이 아닌데 
클래스 이름을 쓴다? → 고민해라. 
같은 클래스면 this를 써라. 클래스명을 대놓고 쓰지마라.
this가 쓰이면 이게 포함된 클래스를 찾아라.
this == class 명.

※ 생성자 안에서 생성자 호출이 가능할까요?

네. 가능합니다.
생성자 내부에서 다른 생성자를 호출하는 것은 가능하다.
하지만, 생성자 내부에서 가장 먼저 실행되어야 한다.!
이유랑 제한사항 꼭 기억해!
이유 : 다른생성자호출(100)이 일벌린걸 남은 걸로 해결하기 위해
제한사항 : 위쪽에. 먼저!!!

Test079.java
-생성자(Constructor)
-멤버변수는 초기화를 안해도 자바가 0으로 초기화 합니다!
-생성자 오버로딩

Test080.java
-생성자(Constructor)와 초기화 블럭(Initialized Block)
-멤버변수 선언하고 초기화 따로
int n;
n = 100;  → 불가합니다  error: <identifier> expected
             『=』는 대입연산자 입니다. 대입연산자? 오른쪽부터
    	     대입 연산자도 연산입니다 . 연산처리는 클래스안에서 ㄴㄴ
             메소드!!안에서만 가능!! 아무래도 상수에 대한 메모리할당이
	     안돼. 클래스가 객체생성전에는 메모리 할당이 안돼서 그런듯?

int n = 100; 이건 가능해요 선언과 동시에 초기화!

초기화 블럭(Initialized Block) 이란?
클래스안에서 멤버변수 선언하고 
{
	이 안에서 멤버변수를 초기화 할 수 있습니다!
}

생성자 vs 초기화블럭
초기화 블럭이 코드를 먼저 수행했다하더라도
최종적으로는 해당 멤버들의 초기화 값은 생성자가 결정.
초기화 블럭 실행 → 생성자 실행
초기화가 무슨 짓을 해도 생성자가 덮어씀!!!!!!!!!!!
생성자 내부에서 생성자를 호출하는 것두 같은 방법.
생성자 내부에서 생성자 호출하면 제일 먼저!!!!!!!!!!!!!!
             