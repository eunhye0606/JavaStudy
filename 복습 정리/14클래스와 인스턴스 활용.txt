Test103.java
-클래스와 인스턴스 활용

// 학생별로 국어점수, 영어점수, 수학점수를 입력받아
// 총점, 평균을 계산하는 프로그램을 구현한다.
// 단, 클래스의 개념을 활용하여 작성할 수 있도록 한다.
// 또한, 이 과정에서 배열을 적극적으로 활용할 수 있도록 한다.
// 클래스 설계는 다음의 가이드라인에 따라 진행할 수 있도록 한다.

// 프로그램을 구성하는 클래스
// 1. Record 클래스
//    - 속성만 존재하는 클래스로 설계할 것 ~!!
//
// 2. Sungjuk 클래스
//    - 인원 수를 입력받아, 입력받은 인원 수 만큼
//    이름, 국어점수 영어점수, 수학점수를 입력받고
//    총점과 평균을 산출하는 클래스로 설계할 것 ~!!
//    속성 : 인원수, Record 형태의 배열
//    기능 : 인원수 입력, 상세 데이터 입력, 총점 및 평균 연산, 결과 출력
//
// 3. Test103 클래스
//    - main() 메소드가 존재하는 외부 클래스로 설계할 것~!!

한 java파일안에서 public은 하나! 왜냐하면 그걸로 자바파일 만들어져.
 인스턴스 생성 전에 다른 클래스에서 활용할거라 
						// static이 붙음!

같은 클래스는 인스턴스 생성 전에 활용가능합니다~!
클래스명.변수명으로 활용하자!
Record r1 = new Record(); 하면 r1객체 만듬.
Record형식의 객체 생성.
Record class에 데이터 변수가 있으면
Record.rank 이런식으로 활용가능

Test104.java
/*=====================================
    ■■■ 클래스와 인스턴스 ■■■
======================================*/

// 클래스와 인스턴스 활용

// 1 ~ 3 사이의 난수를 발생시켜서
// 가위, 바위, 보 게임 프로그램을 구현한다.
// 단, 클래스의 개념을 활용하여 처리할 수 있도록 한다.
// 또한, 배열을 활용하여 처리할 수 있도록 한다.
// 최종적으로 RpsGame 클래스를 완성할 수 있도록 한다.

// ※ 기준 데이터 → 1: 가위, 2: 바위, 3: 보

//실행 예)
// 1: 가위, 2: 바위, 3: 보 중 입력(1 ~ 3) : 4
// 1: 가위, 2: 바위, 3: 보 중 입력(1 ~ 3) : -2
// 1: 가위, 2: 바위, 3: 보 중 입력(1 ~ 3) : 2

// -유저 : 바위
// -컴퓨터 :보

// >> 승부 최종 결과 : 컴퓨터가 이겼습니다 ~!!
// 계속하려면 아무 키나 누르세요...

난수 만들기
① 랜덤 인스턴스 생성.
② rd.nextInt(매개변수) → 0부터 매개변수-1까지 중 하나로 난수 발생
   난수 1개가 나오는거임.
가위바위보 조건을 잘 생각하자!
============================================================================
Test105.java
-메소드 중복정의(Method Overloading)

○ 메소드 오버로딩의 개요
   메소드 오버로딩(Overloading)이란
   메소드가 처리하는 기능은 같고
   메소드 괄호 속에 오는 인수(인자 == 매개변수 == 파라미터)의 갯수가 다르거나
   자료형(Data Type)이 다른 경우
   메소드의 이름을 동일한 이름으로 부여하여 메소드를 정의할 수 있도록
   문법적으로 허용하게 되는데
   이를 메소드 오버로딩(Method Overloading)이라고 한다.

- 메소드명이 같아도 매개변수가 다르면 누굴 부르는지 식별이 가능하다.
- 원래는 !! default로는 메소드의 이름은 같으면 안되는데
  오버로딩으로 같아도 되는 것이다.

Test106.java ★★★★★
-메소드 중복정의(Method Overloading)
- 메소드 오버로딩이 가능한 형태와 불가능한 형태.
※ 자바는 대입연산자 『=』가 있으면 오른쪽 부터 처리!
print(3.14);
double result = print(3.14);

두 개는 오른쪽만 봤을 때 같은 말. 

-/public static void print(double e) {return 10.0} 
//--정의 불가 void인데 return자료형 반환이라

-public static void print(char c) {}    
//-- 일단 됨. 근데 자동형변환 규칙 check~!!

 public static double print(double e) {return 10.0;}//--(x) check~!!

============================================================================
Test107.java ★★★
-만년달력

// 다음과 같은 기능의 프로그램을 구현한다.

// 실행 예)
// 『연도』를 입력하세요 : 2020
// 『월』를 입력하세요 : 6

/*
       [2020년 6월]

   일 월 화 수 목 금 토
   ====================
             1  2  3  4
   5  6  7  8  9  10 11
   12 13 14 15 16 17 18
   19 20 21 ....

   계속하려면 아무 키나 ...
*/
- 시작요일을 알고
- 그 요일부터 해당 월의 날짜마지막까지 출력하면 된다.
- 방법은 출력하고 개행하는 별찍기 방법과
  배열에 담아서 출력하는 방법 → 배열은 안에 숫자가 안들어가면
  0을 출력한다 주의!

Test108.java
-주민등록번호 유효성 검사
/*
○ 주민등록번호 검증 공식

   ① 마지막 자리를 제외한 앞자리 수를 규칙에 맞게 곱한다.

   123456-1234567 (주민번호)
   ****** ****** ---------------------- 각 자릿수에 곱하기
   234567 892345 (각 자리에 곱해질 수)

   ② 규칙에 맞게 곱셈 연산을 수행한 결과를 모두 더한다.

   ex) 7 5 0 6 1 5 - 1 8 6 2 1 3 3
       * * * * * *   * * * * * *
	   2 3 4 5 6 7   8 9 2 3 4 5
	   ----------------------------
	   → 14 + ... + 15
	    9 8 0 6 0 6 - 2 1 6 9 2 1 7
		2 3 4 5 6 7   8 9 2 3 4 5
		
		
	      
		  == 217
	③ 더해진 결과값을 11로 나누어 『나머지』를 취한다.
	         19  → 몫(x)
	      ----------
	   11 | 217
	        11 
		  ----------
		    107
			 99
		  ----------
		      8 → 나머지(O)
	
	④ 11에서 나머지 8을 뺀 결과값을 구한다.
	   
	   11 - 8 → 3

	   ※ ③의 처리 과정에서 나머지가 0인 경우 → 11-0 → 11
	                         나머지가 1인 경우 → 11-1 → 10

		  이를 다시 10으로 나누어 나머지를 취한다.     → 1
		                                               → 0
	      
	  
	⑤ ④의 연산 결과가 주민번호를 구성하는 마지막 숫자와 
	   일치하는지의 여부를 비교한다.

	   일치   → 유효한 주민번호
	   불일치 → 잘못된 주민번호
return; → 메소드 종료 → main()메소드 종료 → 프로그램 종료
continue; → 뒷부분은 무시하고 계속해라. → 해당 블래이스 뒤에가 뒷부분.
str.length() : 문자열의 길이. str이라는 인스턴스의 메소드를 호출한 거고. 
               인스턴스 생성없이도 가능하니 length()메소드는 static메소드구나.
               공백 포함해서 길이를 센다!!!!

str.substring(2,5); : 2부터 5-1까지 출력. 인덱스는 0부터.
                      뒤에가 인덱스의 범위를 초과하면 StringIndexOutOfBoundsExcep 에러발생
                      매개변수하나만 주면 해당 인덱스번호만 출력.

Scanner는 공백구분하면서 다음 문자를 자동으로 가져가지 않음.

