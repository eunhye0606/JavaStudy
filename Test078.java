/*=====================================
■■■ 클래스와 인스턴스 ■■■
======================================*/

// 생성자(Constructor)

public class Test078

{
	int x; // 클래스가 가지고 있는 멤버 변수 x
	
	// 동일한 스코프안에서 동일한 메소드는 정의 안돼
	// 메소드가 식별가능해야하기 때문에.!

	// ※ 생성자의 이름은 항상 예외없이 클래스의 이름과 동일해야 하며
	//    필요할 경우 인수를 받아들이는 것도 가능하고
	//    같은 이름의 메소드를 정의하는 중복정의가 가능하지만
	//    리턴값 (반환값)은 가질 수 없다.


	// ※ 생성자는 다른 일반 메소드처럼 호출될 수 없고,
	//	  『new』 연산자를 이용하여 객체를 생성하기 위해 호출되며,
	//     각 클래스의 인스턴스인 객체를 생성한 후에
	//     생성된 객체의 멤버를 초기화시키는 작업을 수행한다.


	Test078()
	{

		//다른생성자호출(100)
		// 위에가 일벌려둔걸 Test078()로 해결.

		//this.Test078(100); --(x)
		//Test078(100); --(x)
		this(100);
		//인스턴스 생성 구문이 아닌데 
		// 클래스이름을 써야한다?
		// 고민해라!

		x = 10; //여기서 보이는 x는 전역변수 x 하나.
		System.out.println("인자가 없는 생성자");
		System.out.println("Test078이 갖고있는 x : " + x);
		System.out.println("Test078이 갖고있는 x : " + this.x);

		//다른생성자호출(100)
		// 여기에 두면 다른생성자호출(100)으로 다 덮여쓰여짐.
	}

    Test078(int x) //지역변수 x.
	{
		x = x;  //둘 다 지역변수 x
		// 앞에는 전역변수, 뒤에는 지역변수.


		// 『this』한 스코프에 같은 이름 변수 두개이상.
		// 이 변수가 선언된 클래스를 찾아라.
		// this == class 명.으로 이해해라.
		// this == class 명     Test078.x =x;
		// 이건 이미 저 문법 선점한 애가 있어서 불가.
		// 그래서 this 씀.

		this.x =x;
		// Test078.x =x; 으로 이해만 !
		System.out.println("인자가 하나인 생성자");
		System.out.println("Test078이 갖고있는 x : " + x);
		System.out.println("Test078이 갖고있는 x : " + this.x);
		//System.out.println("this.x == x ?? : " +(this.x == x));
		//System.out.println("x == x ?? : " +(x == x));
	}
	/*
	Test078(int num)
	{
		x = num;
		System.out.println("인자가 하나인 생성자");
	}
	*/


	public static void main(String[] argS)
	{
		//Test078 클래스 기반 인스턴스 생성
		Test078 ob1 = new Test078();
		Test078 ob2 = new Test078(100);

		System.out.println();
		System.out.println("main 에서 ob1.x : " + ob1.x);
		System.out.println("main 에서 ob2.x : " + ob2.x);
		//10, 100??
		/*
			main 에서 ob1.x : 10
			main 에서 ob2.x : 100
			계속하려면 아무 키나 누르십시오 . . .	
		*/

		/*
		인자가 없는 생성자
		인자가 하나인 생성자 
		계속하려면 아무 키나 누르십시오 . . .  
		*/
	}
}

/*
인자가 없는 생성자
Test078이 갖고있는 x : 10 x
Test078이 갖고있는 x : 10 this.x 
인자가 하나인 생성자
Test078이 갖고있는 x : 100
계속하려면 아무 키나 누르십시오 . . .

*/

/*
Q. 생성자안에서 생성자 호출이 가능할까?

A. 
   ※ 생성자 내부에서 다른 생성자를 호출하는 것은 가능하다.
      하지만, 생성자 내부에서 가장 먼저 실행되어야 한다.!
	  //이유랑 제한사항 꼭 기억해!
	  // 이유 : 다른생성자호출(100)이 일벌린걸 남은 걸로 해결하기 위해
	  //  제한사항 : 위쪽에.



class 붕어빵
{
	int 팥;
	int 반죽;
	int 물;
	int 가열시간;
	
	붕어빵()
	{
		this.팥 = 50;
		this.반죽 = 60;
		this.물 = 10;
		this.가열시간 = 5;

	}


	


	붕어빵(int 팥, int 반죽, int 물, int 가열시간)
	{
		this.팥 = 팥;
		this.반죽 = 반죽;
		this.물 = 물;
		this.가열시간 = 가열시간;
	}
}

	붕어빵(int 가열시간) //가능.
	{
		붕어빵();
		this.가열시간 = 가열시간;
	}
}

class 외부클래스
{
	main()
	{	
		// 붕어빵 인스턴스 생성.
		붕어빵 ob1 = new 붕어빵();
	}
}
*/

/*

인자가 하나인 생성자
Test078이 갖고있는 x : 100
Test078이 갖고있는 x : 100
인자가 없는 생성자
Test078이 갖고있는 x : 10
Test078이 갖고있는 x : 10
인자가 하나인 생성자
Test078이 갖고있는 x : 100
Test078이 갖고있는 x : 100

main 에서 ob1.x : 10
main 에서 ob2.x : 100
계속하려면 아무 키나 누르십시오 . . .
*/